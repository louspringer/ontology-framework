@startuml ontology-framework

' Styling
skinparam class {
    BackgroundColor<<Meta>> LightPink
    BackgroundColor<<Core>> LightBlue
    BackgroundColor<<Domain>> LightGreen
    BackgroundColor<<Base>> LightGray
    BackgroundColor<<Integration>> LightYellow
}

note as N1
  The most important aspects of this framework are the relationships
  between ontologies and how they enable semantic interoperability.
  
  Key principles:
  - Meta layer provides foundational concepts
  - Core layer implements domain-agnostic patterns
  - Domain layer adds specific knowledge areas
  - Integration layer ensures consistency
end note

' Meta Layer
class MetaMetaOntology <<Meta>> {
    + AbstractionDimension
    + AbstractionLevel
    + KnowledgeDomain
    --
    + hasLevel
    + levelNumber
    + domainScope
}

note right of MetaMetaOntology
  Foundation of the framework
  Defines how knowledge is structured
  and abstracted across domains
end note

class LLMGuidanceOntology <<Meta>> {
    + Interpretation
    + Action
    + DomainAnalogy
    --
    + hasAction
    + analogySource
    + analogyTarget
}

note right of LLMGuidanceOntology
  Bridges between LLM capabilities
  and domain-specific needs through
  analogical reasoning
end note

' Core Layer
class ProblemOntology <<Core>> {
    + BusinessNeed
    + Context
    + Constraint
    --
    + hasValue
    + hasPriority
    + hasContext
}

class SolutionOntology <<Core>> {
    + TechnicalSolution
    + Implementation
    + Validation
    --
    + satisfies
    + hasImplementation
    + validationStatus
}

note right of SolutionOntology
  Solutions are validated against
  problem constraints and must
  satisfy business needs
end note

class ConversationOntology <<Core>> {
    + BacklogItem
    + Conversation
    + Status
    --
    + hasStatus
    + hasParticipant
    + timestamp
}

class CognitionPatternsOntology <<Core>> {
    + ProcessingSystem
    + Pattern
    + TemporalContext
    --
    + hasConfidenceScore
    + implementsMetaConcept
    + solvesProblem
}

note left of CognitionPatternsOntology
  Captures recurring patterns in
  how LLMs process and understand
  domain concepts
end note

' Domain Layer
class CreativeAnalogiesOntology <<Domain>> {
    + PlayfulAnalogy
    + AnalogicalBridge
    + ExplanationPattern
    --
    + funFactor
    + hasBridge
    + usesPattern
}

class AIToolsOntology <<Domain>> {
    + AITool
    + Category
    + Capability
    --
    + hasCategory
    + hasCapability
    + maturityLevel
}

class OracleOCIDiscoveryOntology <<Domain>> {
    + OracleTechnologyStack
    + CloudService
    + LearningResource
    --
    + hasComponent
    + requires
    + provides
}

' Integration Layer
class PrefixManagementOntology <<Integration>> {
    + Prefix
    + PrefixCategory
    --
    + hasPrefix
    + hasURI
    + isRelativePath
}

class OntologyShapes <<Integration>> {
    + OntologyShape
    + ClassShape
    --
    + hasValidation
    + hasConstraint
}

note bottom of OntologyShapes
  Ensures ontological consistency
  through SHACL shapes and
  validation rules
end note

' Relationships
MetaMetaOntology <|-- LLMGuidanceOntology
LLMGuidanceOntology <|-- ProblemOntology
LLMGuidanceOntology <|-- SolutionOntology
LLMGuidanceOntology <|-- ConversationOntology
LLMGuidanceOntology <|-- CognitionPatternsOntology

ProblemOntology --> SolutionOntology : influences
CognitionPatternsOntology --> SolutionOntology : enhances
ConversationOntology --> CognitionPatternsOntology : informs

CreativeAnalogiesOntology --> LLMGuidanceOntology : extends
AIToolsOntology --> LLMGuidanceOntology : implements
OracleOCIDiscoveryOntology --> SolutionOntology : specializes

PrefixManagementOntology ..> MetaMetaOntology : manages
OntologyShapes ..> MetaMetaOntology : validates

@enduml 