@prefix ns1: <http://example.org/provenance#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ns1: a owl:Ontology ;
    rdfs:label "Model Provenance Ontology" ;
    rdfs:comment "Ontology for tracking model generation and provenance" ;
    owl:versionInfo "1.0.0" .

ns1:ExampleModel a ns1:GeneratedModel ;
    ns1:generatedBy ns1:ExampleGenerator ;
    ns1:hasChangeRecord [ a ns1:ChangeRecord ;
            ns1:hasAuthor "System" ;
            ns1:hasTimestamp "2024-04-11T12:00:00+00:00"^^xsd:dateTime ] ;
    ns1:hasVersion [ a ns1:VersionInfo ;
            ns1:hasAuthor "System" ;
            ns1:hasTimestamp "2024-04-11T12:00:00+00:00"^^xsd:dateTime ] .

ns1:generatedBy a owl:ObjectProperty ;
    rdfs:label "generated by" ;
    rdfs:domain ns1:GeneratedModel ;
    rdfs:range ns1:ModelGenerator .

ns1:hasAuthor a owl:DatatypeProperty ;
    rdfs:label "has author" ;
    rdfs:domain ns1:ChangeRecord ;
    rdfs:range xsd:string .

ns1:hasChangeRecord a owl:ObjectProperty ;
    rdfs:label "has change record" ;
    rdfs:domain ns1:GeneratedModel ;
    rdfs:range ns1:ChangeRecord .

ns1:hasChecksum a owl:DatatypeProperty ;
    rdfs:label "has checksum" ;
    rdfs:domain <http://example.org/code#CodeArtifact> ;
    rdfs:range xsd:string .

ns1:hasDependencies a owl:ObjectProperty ;
    rdfs:label "has dependencies" ;
    rdfs:domain ns1:ModelGenerator ;
    rdfs:range <http://example.org/code#CodeArtifact> .

ns1:hasSourceCode a owl:ObjectProperty ;
    rdfs:label "has source code" ;
    rdfs:domain ns1:ModelGenerator ;
    rdfs:range <http://example.org/code#CodeArtifact> .

ns1:hasTimestamp a owl:DatatypeProperty ;
    rdfs:label "has timestamp" ;
    rdfs:domain ns1:ChangeRecord ;
    rdfs:range xsd:dateTime .

ns1:hasVersion a owl:ObjectProperty ;
    rdfs:label "has version" ;
    rdfs:domain ns1:GeneratedModel ;
    rdfs:range ns1:VersionInfo .

ns1:ExampleGenerator a ns1:ModelGenerator ;
    rdfs:label "Example Model Generator" ;
    ns1:hasChecksum "sha256:example" ;
    ns1:hasSourceCode """#!/usr/bin/env python3
\"\"\"Generate model provenance ontology using rdflib.\"\"\"

from rdflib import Graph, URIRef, Literal, BNode
from rdflib.namespace import RDF, RDFS, OWL, XSD
from typing import Dict, Any

def generate_model_provenance() -> Graph:
    \"\"\"Generate model provenance ontology.\"\"\"
    g = Graph()
    
    # Define namespaces
    provenance = URIRef("http://example.org/provenance#")
    code = URIRef("http://example.org/code#")
    
    # Add ontology metadata
    g.add((provenance, RDF.type, OWL.Ontology))
    g.add((provenance, RDFS.label, Literal("Model Provenance Ontology")))
    g.add((provenance, RDFS.comment, Literal("Ontology for tracking model generation and provenance")))
    g.add((provenance, OWL.versionInfo, Literal("1.0.0")))
    
    # Define classes
    ModelGenerator = URIRef(provenance + "ModelGenerator")
    GeneratedModel = URIRef(provenance + "GeneratedModel")
    CodeArtifact = URIRef(code + "CodeArtifact")
    VersionInfo = URIRef(provenance + "VersionInfo")
    ChangeRecord = URIRef(provenance + "ChangeRecord")
    
    for cls, label, comment in [
        (ModelGenerator, "Model Generator", "Code that generates ontology models"),
        (GeneratedModel, "Generated Model", "Ontology model generated from code"),
        (CodeArtifact, "Code Artifact", "Source code file or module"),
        (VersionInfo, "Version Information", "Version and metadata about a model"),
        (ChangeRecord, "Change Record", "Record of changes to a model")
    ]:
        g.add((cls, RDF.type, OWL.Class))
        g.add((cls, RDFS.label, Literal(label)))
        g.add((cls, RDFS.comment, Literal(comment)))
    
    # Define properties
    generatedBy = URIRef(provenance + "generatedBy")
    hasSourceCode = URIRef(provenance + "hasSourceCode")
    hasVersion = URIRef(provenance + "hasVersion")
    hasChangeRecord = URIRef(provenance + "hasChangeRecord")
    hasChecksum = URIRef(provenance + "hasChecksum")
    hasTimestamp = URIRef(provenance + "hasTimestamp")
    hasAuthor = URIRef(provenance + "hasAuthor")
    hasDependencies = URIRef(provenance + "hasDependencies")
    
    for prop, label, domain, range_type in [
        (generatedBy, "generated by", GeneratedModel, ModelGenerator),
        (hasSourceCode, "has source code", ModelGenerator, CodeArtifact),
        (hasVersion, "has version", GeneratedModel, VersionInfo),
        (hasChangeRecord, "has change record", GeneratedModel, ChangeRecord),
        (hasChecksum, "has checksum", CodeArtifact, XSD.string),
        (hasTimestamp, "has timestamp", ChangeRecord, XSD.dateTime),
        (hasAuthor, "has author", ChangeRecord, XSD.string),
        (hasDependencies, "has dependencies", ModelGenerator, CodeArtifact)
    ]:
        g.add((prop, RDF.type, OWL.ObjectProperty if range_type not in [XSD.string, XSD.dateTime] else OWL.DatatypeProperty))
        g.add((prop, RDFS.label, Literal(label)))
        g.add((prop, RDFS.domain, domain))
        g.add((prop, RDFS.range, range_type))
    
    # Example generator with self-reference
    generator_uri = URIRef(provenance + "ExampleGenerator")
    g.add((generator_uri, RDF.type, ModelGenerator))
    g.add((generator_uri, RDFS.label, Literal("Example Model Generator")))
    
    # Add source code as literal
    with open(__file__, 'r') as f:
        source_code = f.read()
    g.add((generator_uri, hasSourceCode, Literal(source_code)))
    
    # Add checksum (example)
    g.add((generator_uri, hasChecksum, Literal("sha256:example")))
    
    # Add version info
    version_bnode = BNode()
    g.add((version_bnode, RDF.type, VersionInfo))
    g.add((version_bnode, hasTimestamp, Literal("2024-04-11T12:00:00Z", datatype=XSD.dateTime)))
    g.add((version_bnode, hasAuthor, Literal("System")))
    
    # Add change record
    change_bnode = BNode()
    g.add((change_bnode, RDF.type, ChangeRecord))
    g.add((change_bnode, hasTimestamp, Literal("2024-04-11T12:00:00Z", datatype=XSD.dateTime)))
    g.add((change_bnode, hasAuthor, Literal("System")))
    
    # Create self-referential model
    model_uri = URIRef(provenance + "ExampleModel")
    g.add((model_uri, RDF.type, GeneratedModel))
    g.add((model_uri, generatedBy, generator_uri))
    g.add((model_uri, hasVersion, version_bnode))
    g.add((model_uri, hasChangeRecord, change_bnode))
    
    return g

if __name__ == "__main__":
    g = generate_model_provenance()
    g.serialize("guidance/modules/model_provenance.ttl", format="turtle") """ .

ns1:VersionInfo a owl:Class ;
    rdfs:label "Version Information" ;
    rdfs:comment "Version and metadata about a model" .

<http://example.org/code#CodeArtifact> a owl:Class ;
    rdfs:label "Code Artifact" ;
    rdfs:comment "Source code file or module" .

ns1:ChangeRecord a owl:Class ;
    rdfs:label "Change Record" ;
    rdfs:comment "Record of changes to a model" .

ns1:GeneratedModel a owl:Class ;
    rdfs:label "Generated Model" ;
    rdfs:comment "Ontology model generated from code" .

ns1:ModelGenerator a owl:Class ;
    rdfs:label "Model Generator" ;
    rdfs:comment "Code that generates ontology models" .

