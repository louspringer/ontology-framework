@prefix : <./spore_management#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix core: <../core#> .
@prefix guidance: <../../guidance#> .
@prefix meta: <http://example.org/guidance#> .
@prefix model: <../model#> .

# Spore Management Module Definition
:SporeManagementModule rdf:type owl:Ontology ;
    rdfs:label "Spore Management Module" ;
    rdfs:comment "Guidance for managing Semantic Spores in the ontology framework" ;
    dc:title "Spore Management Module" ;
    dc:version "1.0.0" ;
    owl:versionInfo "1.0.0" ;
    dct:created "2024-03-21T00:00:00"^^xsd:dateTime ;
    dct:modified "2024-03-21T00:00:00"^^xsd:dateTime ;
    owl:imports <core.ttl> ;
    owl:imports <model.ttl> ;
    owl:imports <validation.ttl> .

# Spore Management Classes
:SporeManager rdf:type owl:Class ;
    rdfs:label "Spore Manager" ;
    rdfs:comment "Manages Semantic Spores according to governance rules" ;
    rdfs:subClassOf model:ModelFirstPrinciple ;
    owl:versionInfo "1.0.0" .

:SporeValidator rdf:type owl:Class ;
    rdfs:label "Spore Validator" ;
    rdfs:comment "Validates spores against governance rules" ;
    rdfs:subClassOf :SporeManager ;
    owl:versionInfo "1.0.0" .

:SporeIntegration rdf:type owl:Class ;
    rdfs:label "Spore Integration" ;
    rdfs:comment "Handles integration of spores into target models" ;
    rdfs:subClassOf :SporeManager ;
    owl:versionInfo "1.0.0" .

# Spore Management Properties
:validatesSpore rdf:type owl:ObjectProperty ;
    rdfs:label "Validates Spore" ;
    rdfs:comment "Links validator to spore validation process" ;
    rdfs:domain :SporeValidator ;
    rdfs:range meta:TransformationPattern .

:integratesSpore rdf:type owl:ObjectProperty ;
    rdfs:label "Integrates Spore" ;
    rdfs:comment "Links integration process to target model" ;
    rdfs:domain :SporeIntegration ;
    rdfs:range owl:Ontology .

:distributesPatch rdf:type owl:ObjectProperty ;
    rdfs:label "Distributes Patch" ;
    rdfs:comment "Links spore to its patches" ;
    rdfs:domain meta:TransformationPattern ;
    rdfs:range meta:ConceptPatch .

:confirmedViolation rdf:type owl:ObjectProperty ;
    rdfs:label "Confirmed Violation" ;
    rdfs:comment "Links spore to conformance violations" ;
    rdfs:domain meta:TransformationPattern ;
    rdfs:range xsd:string .

# Spore Management Instances
:sporeValidationGuidance rdf:type owl:NamedIndividual ;
    rdf:type :SporeValidator ;
    rdfs:label "Spore Validation Guidance" ;
    core:sourceContext "Spore Governance" ;
    core:targetContext "Model Quality" ;
    core:complexity "2"^^xsd:integer ;
    rdfs:comment """Spore validation requirements:
    1. Register patterns via meta:TransformationPattern
    2. Support SHACL validation rules
    3. Enable patch distribution via meta:distributesPatch
    4. Track conformance violations via meta:confirmedViolation""" .

:sporeIntegrationGuidance rdf:type owl:NamedIndividual ;
    rdf:type :SporeIntegration ;
    rdfs:label "Spore Integration Guidance" ;
    core:sourceContext "Model Integration" ;
    core:targetContext "System Evolution" ;
    core:complexity "3"^^xsd:integer ;
    rdfs:comment """Spore integration process:
    1. Validate spore against governance rules
    2. Check target model compatibility
    3. Apply patches and track changes
    4. Validate integration results""" .

# SHACL Validation Rules
:SporeValidatorShape rdf:type sh:NodeShape ;
    sh:targetClass :SporeValidator ;
    sh:property [
        sh:path :validatesSpore ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path core:complexity ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
        sh:minInclusive 1 ;
        sh:maxInclusive 5 ;
    ] .

:SporeIntegrationShape rdf:type sh:NodeShape ;
    sh:targetClass :SporeIntegration ;
    sh:property [
        sh:path :integratesSpore ;
        sh:minCount 1 ;
    ] ;
    sh:property [
        sh:path core:complexity ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
        sh:minInclusive 1 ;
        sh:maxInclusive 5 ;
    ] .

# TODO Section
# - Add specific spore validation patterns
# - Document integration workflows
# - Add patch management guidance
# - Include conformance tracking examples
# - Add versioning requirements
# - Document provider-specific setup
# - Include usage examples
# - Add performance impact considerations
# - Document API key management
# - Add model-specific benchmarks 