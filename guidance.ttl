@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix guidance: <./guidance#> .
@prefix metameta: <./metameta#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix meta: <./meta#> .
@prefix problem: <./problem#> .
@prefix solution: <./solution#> .
@prefix conversation: <./conversation#> .

guidance:LLMGuidanceOntology rdf:type owl:Ontology ;
    dc:title "LLM Guidance Meta-Ontology" ;
    dc:version "1.2" ;
    dct:created "2024-01-20"^^xsd:date ;
    dct:modified "2024-02-09"^^xsd:date ;
    dct:publisher "Ontology Framework Project" ;
    dct:license <http://opensource.org/licenses/MIT> ;
    dct:description "Ontology for managing LLM guidance and interdisciplinary collaboration patterns" ;
    dct:isPartOf <http://louspringer.com/ontology-framework> ;
    dct:type dct:Dataset ;
    dct:conformsTo <http://www.w3.org/2002/07/owl> ;
    dct:requires <./metameta> ;
    dct:audience "AI researchers, ontology engineers, and domain experts" ;
    rdfs:comment "Updated to include guidance for Cursor rules and tool usage." ;
    owl:imports <./metameta> .

# Core Classes
guidance:Interpretation rdf:type owl:Class ;
    rdfs:label "Interpretation" ;
    rdfs:comment "Guidance on how to interpret an ontology element" ;
    rdfs:subClassOf metameta:AbstractionDimension .

guidance:Action rdf:type owl:Class ;
    rdfs:label "Action" ;
    rdfs:comment "An action that can be taken based on interpretation" .

guidance:DomainAnalogy rdf:type owl:Class ;
    rdfs:label "Domain Analogy" ;
    rdfs:subClassOf guidance:Interpretation .

# Core Properties
guidance:hasAction rdf:type owl:ObjectProperty ;
    rdfs:domain guidance:Interpretation ;
    rdfs:range guidance:Action .

guidance:analogySource rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:DomainAnalogy ;
    rdfs:range xsd:string .

guidance:analogyTarget rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:DomainAnalogy ;
    rdfs:range xsd:string .

guidance:complexity rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:Interpretation ;
    rdfs:range xsd:integer .

# New Properties
guidance:sourceContext rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:Interpretation ;
    rdfs:range xsd:string ;
    rdfs:comment "Context from which the interpretation is derived." .

guidance:targetContext rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:Interpretation ;
    rdfs:range xsd:string ;
    rdfs:comment "Context to which the interpretation is applied." .

# New Instances
guidance:InterdisciplinaryCollaboration rdf:type guidance:Interpretation ;
    rdfs:label "Interdisciplinary Collaboration" ;
    guidance:sourceContext "Molecular Biology" ;
    guidance:targetContext "Computer Programming" ;
    rdfs:comment "Guidance for facilitating collaboration between biologists and programmers." .

# Versioning Classes
guidance:BestPractice rdf:type owl:Class ;
    rdfs:label "Best Practice" ;
    rdfs:comment "A recommended practice for ontology development and management" .

guidance:VersioningBestPractice rdf:type owl:Class ;
    rdfs:label "Versioning Best Practice" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "All ontologies should include owl:versionInfo to indicate their version for tracking and management purposes." ;
    rdfs:seeAlso <https://www.w3.org/TR/owl2-syntax/#Versioning_of_Ontologies> .

# Versioning Properties
guidance:recommendVersioning rdf:type owl:ObjectProperty ;
    rdfs:label "Recommends Versioning" ;
    rdfs:domain guidance:VersioningBestPractice ;
    rdfs:range owl:Ontology ;
    rdfs:comment "A property indicating that versioning is recommended for ontologies." .

# Versioning Instances
guidance:guidanceForVersioning rdf:type owl:NamedIndividual ;
    rdf:type guidance:VersioningBestPractice ;
    guidance:recommendVersioning owl:versionInfo ;
    rdfs:comment "This best practice ensures that all ontologies include an owl:versionInfo property for clarity and management." .

# Environment Variable Integration Pattern
guidance:EnvironmentVariablePattern rdf:type owl:Class ;
    rdfs:label "Environment Variable Integration Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for integrating environment variables across ontologies" .

guidance:hasVariableDefinition rdf:type owl:ObjectProperty ;
    rdfs:label "Has Variable Definition" ;
    rdfs:domain guidance:EnvironmentVariablePattern ;
    rdfs:range owl:Ontology ;
    rdfs:comment "Links to the ontology containing environment variable definitions" .

guidance:hasVariableUsage rdf:type owl:ObjectProperty ;
    rdfs:label "Has Variable Usage" ;
    rdfs:domain guidance:EnvironmentVariablePattern ;
    rdfs:range owl:Ontology ;
    rdfs:comment "Links to ontologies that use environment variables" .

guidance:environmentVariableGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:EnvironmentVariablePattern ;
    rdfs:label "Environment Variable Integration Guidance" ;
    guidance:hasVariableDefinition <./environment_variables> ;
    guidance:hasVariableUsage <./cortexteams> ;
    guidance:sourceContext "Environment Variable Management" ;
    guidance:targetContext "Cross-Ontology Integration" ;
    guidance:complexity "3"^^xsd:integer ;
    rdfs:comment """Best practices for environment variable integration:
1. Define all environment variables in environment_variables.ttl
2. Import environment_variables.ttl in consuming ontologies using env: prefix
3. Use :usesEnvironmentVariable for general variable usage
4. Use :hasEnvironmentRequirement for prerequisites
5. Reference variables using ${VAR_NAME} format
6. Add SHACL validation for variable requirements.""" .

# SHACL Validation for Environment Variable Pattern
guidance:EnvironmentVariablePatternShape rdf:type sh:NodeShape ;
    sh:targetClass guidance:EnvironmentVariablePattern ;
    sh:property [
        sh:path guidance:hasVariableDefinition ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify exactly one environment variable definition ontology"
    ] ;
    sh:property [
        sh:path guidance:hasVariableUsage ;
        sh:minCount 1 ;
        sh:message "Must specify at least one ontology that uses environment variables"
    ] .

# Ontology Relationship Pattern
guidance:OntologyRelationshipPattern rdf:type owl:Class ;
    rdfs:label "Ontology Relationship Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for managing relationships between ontologies" .

guidance:ontologyRelationshipGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:OntologyRelationshipPattern ;
    rdfs:label "Ontology Relationship Guidance" ;
    guidance:sourceContext "Ontology Organization" ;
    guidance:targetContext "Cross-Ontology Integration" ;
    guidance:complexity "2"^^xsd:integer ;
    rdfs:comment """Best practices for ontology relationships:
1. Use relative paths for local ontologies: @prefix meta: <./meta#>
2. Use full URIs only for external standards: @prefix owl: <http://www.w3.org/2002/07/owl#>
3. Always include core ontologies:
   - meta.ttl
   - metameta.ttl
   - conversation.ttl
   - problem.ttl
   - solution.ttl
   - guidance.ttl
4. Avoid circular dependencies
5. Document ontology purpose and dependencies in metadata
6. Use SHACL shapes to validate relationships""" .

# SHACL Validation for Ontology Relationships
guidance:OntologyRelationshipShape rdf:type sh:NodeShape ;
    sh:targetClass owl:Ontology ;
    sh:property [
        sh:path owl:imports ;
        sh:minCount 1 ;
        sh:message "Ontology must import at least one core ontology"
    ] ;
    sh:property [
        sh:path dct:description ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
        sh:message "Ontology must have a description"
    ] ;
    sh:property [
        sh:path owl:versionInfo ;
        sh:minCount 1 ;
        sh:message "Ontology must have version information"
    ] .

# Prefix Management Integration
guidance:PrefixManagementPattern rdf:type owl:Class ;
    rdfs:label "Prefix Management Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for managing ontology prefixes consistently" .

guidance:prefixManagementGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:PrefixManagementPattern ;
    rdfs:label "Prefix Management Guidance" ;
    guidance:sourceContext "Ontology Organization" ;
    guidance:targetContext "Prefix Standardization" ;
    guidance:complexity "1"^^xsd:integer ;
    rdfs:comment """Best practices for prefix management:
1. Use standard prefixes for external ontologies (rdf, rdfs, owl, xsd)
2. Use relative paths for local ontologies
3. Document prefix meanings and sources
4. Maintain consistent prefix naming across ontologies
5. Use prefix_management.ttl for centralized prefix definitions""" .

# Documentation Organization Pattern
guidance:DocumentationPattern rdf:type owl:Class ;
    rdfs:label "Documentation Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for organizing and validating documentation based on ontological concepts" .

guidance:hasDocumentationType rdf:type owl:ObjectProperty ;
    rdfs:label "Has Documentation Type" ;
    rdfs:domain guidance:DocumentationPattern ;
    rdfs:range guidance:DocumentationType ;
    rdfs:comment "Links a documentation pattern to its type" .

guidance:DocumentationType rdf:type owl:Class ;
    rdfs:label "Documentation Type" ;
    rdfs:comment "Types of documentation in the system" .

guidance:ConceptualDocumentation rdf:type guidance:DocumentationType ;
    rdfs:label "Conceptual Documentation" ;
    rdfs:comment "Documentation of ontological concepts and relationships" .

guidance:ImplementationDocumentation rdf:type guidance:DocumentationType ;
    rdfs:label "Implementation Documentation" ;
    rdfs:comment "Documentation of concrete implementations and patterns" .

guidance:ValidationDocumentation rdf:type guidance:DocumentationType ;
    rdfs:label "Validation Documentation" ;
    rdfs:comment "Documentation of validation rules and constraints" .

guidance:documentationOrganizationGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:DocumentationPattern ;
    rdfs:label "Documentation Organization Guidance" ;
    guidance:sourceContext "Ontology Documentation" ;
    guidance:targetContext "Documentation Structure" ;
    guidance:complexity "3"^^xsd:integer ;
    rdfs:comment """Best practices for documentation organization:
1. All documentation must map to ontological concepts
2. Documentation structure follows ontology relationships
3. Cross-references must be bidirectional
4. Version tracking aligns with ontology versions
5. Validation rules derive from guidance patterns
6. Directory structure reflects ontological hierarchy
7. Each document must specify its source ontology
8. Changes must maintain ontological consistency""" .

# Documentation Validation Shape
guidance:DocumentationShape rdf:type sh:NodeShape ;
    sh:targetClass guidance:DocumentationPattern ;
    sh:property [
        sh:path guidance:hasDocumentationType ;
        sh:minCount 1 ;
        sh:message "Documentation must have a specified type"
    ] ;
    sh:property [
        sh:path guidance:sourceContext ;
        sh:minCount 1 ;
        sh:message "Documentation must specify its source context"
    ] ;
    sh:property [
        sh:path guidance:targetContext ;
        sh:minCount 1 ;
        sh:message "Documentation must specify its target context"
    ] ;
    sh:property [
        sh:path owl:versionInfo ;
        sh:minCount 1 ;
        sh:message "Documentation must have version information"
    ] .

# Documentation Structure Pattern
guidance:DocumentationStructurePattern rdf:type guidance:DocumentationPattern ;
    rdfs:label "Documentation Structure Pattern" ;
    guidance:hasDocumentationType guidance:ConceptualDocumentation ;
    guidance:sourceContext "Ontology Structure" ;
    guidance:targetContext "Documentation Organization" ;
    guidance:complexity "2"^^xsd:integer ;
    rdfs:comment """Documentation structure requirements:
1. Root directory maps to core ontology
2. Subdirectories map to sub-ontologies
3. Cross-references use relative paths
4. Version information in frontmatter
5. Bidirectional navigation links
6. Clear ontology mappings""" .

# Cross-reference Pattern
guidance:CrossReferencePattern rdf:type guidance:DocumentationPattern ;
    rdfs:label "Cross Reference Pattern" ;
    guidance:hasDocumentationType guidance:ValidationDocumentation ;
    guidance:sourceContext "Documentation Links" ;
    guidance:targetContext "Navigation Structure" ;
    guidance:complexity "2"^^xsd:integer ;
    rdfs:comment """Cross-reference requirements:
1. All references must be bidirectional
2. References must use relative paths
3. References must include version context
4. Broken references must be detected
5. References must map to ontology relationships""" .

# Authentication Pattern Guidance
guidance:AuthenticationPatternGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:BestPractice ;
    rdfs:label "Authentication Pattern Guidance" ;
    guidance:sourceContext "Security Architecture" ;
    guidance:targetContext "Authentication Implementation" ;
    guidance:complexity "3"^^xsd:integer ;
    rdfs:comment """Best practices for authentication patterns:
1. Always relate authentication to identity federation
2. Define clear capability requirements
3. Specify platform-specific implementations
4. Document token management
5. Include security characteristics
6. Define validation rules
7. Consider service account patterns""" .

# Data Access Pattern Guidance
guidance:DataAccessPatternGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:BestPractice ;
    rdfs:label "Data Access Pattern Guidance" ;
    guidance:sourceContext "Data Architecture" ;
    guidance:targetContext "Data Access Implementation" ;
    guidance:complexity "3"^^xsd:integer ;
    rdfs:comment """Best practices for data access patterns:
1. Separate public and private data patterns
2. Link to authentication requirements
3. Define clear access control boundaries
4. Implement zero-copy patterns where appropriate
5. Consider service account implications
6. Document data characteristics
7. Include validation rules""" .

# Pattern Integration Guidance
guidance:PatternIntegrationGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:BestPractice ;
    rdfs:label "Pattern Integration Guidance" ;
    guidance:sourceContext "Pattern Architecture" ;
    guidance:targetContext "Implementation Integration" ;
    guidance:complexity "4"^^xsd:integer ;
    rdfs:comment """Best practices for pattern integration:
1. Document pattern relationships explicitly
2. Define valid and invalid combinations
3. Include impact analysis
4. Specify capability requirements
5. Add validation rules
6. Consider cross-pattern implications
7. Document security implications""" .

# SHACL Validation for Pattern Guidance
guidance:PatternGuidanceShape rdf:type sh:NodeShape ;
    sh:targetClass guidance:BestPractice ;
    sh:property [
        sh:path guidance:sourceContext ;
        sh:minCount 1 ;
        sh:message "Pattern guidance must specify source context"
    ] ;
    sh:property [
        sh:path guidance:targetContext ;
        sh:minCount 1 ;
        sh:message "Pattern guidance must specify target context"
    ] ;
    sh:property [
        sh:path guidance:complexity ;
        sh:minCount 1 ;
        sh:message "Pattern guidance must specify complexity"
    ] .

# Organic Network Patterns
guidance:OrganicNetworkPattern rdf:type owl:Class ;
    rdfs:label "Organic Network Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Patterns based on biological network analogies for managing ontological relationships" .

guidance:MycelialNetworkGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:OrganicNetworkPattern ;
    rdfs:label "Mycelial Network Pattern" ;
    guidance:sourceContext "Mycorrhizal Networks" ;
    guidance:targetContext "Ontology Relationships" ;
    guidance:complexity "4"^^xsd:integer ;
    rdfs:comment """Network management principles:
1. Not every node needs to connect to every network
2. Maintain critical pathways actively
3. Allow temporary connections for context switching
4. Accept pruning of unused pathways
5. Monitor energy cost of maintaining connections
6. Keep enough connections to detect duplicates
7. Intentionally isolate when beneficial""" .

guidance:VirtualTreeManagement rdf:type owl:NamedIndividual ;
    rdf:type guidance:OrganicNetworkPattern ;
    rdfs:label "Virtual Tree Management" ;
    guidance:sourceContext "Neural Networks" ;
    guidance:targetContext "Ontology Organization" ;
    guidance:complexity "4"^^xsd:integer ;
    rdfs:comment """Virtual tree principles:
1. Each context is a virtual tree
2. Elements can exist in multiple trees
3. The mu tree holds lost/undiscovered elements
4. Orphaned elements must be intentionally isolated
5. Context switching has energy costs
6. Pattern recognition works across trees
7. Not everything needs to be wickered""" .

# Tree States
guidance:TreeState rdf:type owl:Class ;
    rdfs:label "Tree State" ;
    rdfs:comment "Possible states for elements in the virtual tree system" .

guidance:ActiveTree rdf:type guidance:TreeState ;
    rdfs:label "Active Tree" ;
    rdfs:comment "Currently active and maintained virtual tree" .

guidance:MuTree rdf:type guidance:TreeState ;
    rdfs:label "Mu Tree" ;
    rdfs:comment "Contains lost or undiscovered elements that may need rediscovery" .

guidance:OrphanedTree rdf:type guidance:TreeState ;
    rdfs:label "Orphaned Tree" ;
    rdfs:comment "Intentionally isolated elements" .

# Context Management
guidance:ContextSwitchingPattern rdf:type owl:NamedIndividual ;
    rdf:type guidance:OrganicNetworkPattern ;
    rdfs:label "Context Switching Pattern" ;
    guidance:sourceContext "Neural Circuit Activation" ;
    guidance:targetContext "Ontology Context Management" ;
    guidance:complexity "3"^^xsd:integer ;
    rdfs:comment """Context switching guidelines:
1. Recognize energy cost of context switches
2. Maintain minimal necessary active contexts
3. Cache frequently used pathways
4. Allow graceful context decay
5. Document context boundaries
6. Track context dependencies
7. Monitor switching overhead""" .

# Wickering Efficiency
guidance:WickeringEfficiencyPattern rdf:type owl:NamedIndividual ;
    rdf:type guidance:OrganicNetworkPattern ;
    rdfs:label "Wickering Efficiency Pattern" ;
    guidance:sourceContext "Synaptic Pruning" ;
    guidance:targetContext "Ontology Connection Management" ;
    guidance:complexity "4"^^xsd:integer ;
    rdfs:comment """Efficient wickering guidelines:
1. Maintain critical pathways only
2. Allow temporary connections
3. Document connection rationale
4. Monitor maintenance costs
5. Prune unused connections
6. Track connection usage
7. Balance coverage vs. cost""" .

# SHACL Validation
guidance:OrganicNetworkShape rdf:type sh:NodeShape ;
    sh:targetClass guidance:OrganicNetworkPattern ;
    sh:property [
        sh:path guidance:sourceContext ;
        sh:minCount 1 ;
        sh:message "Must specify biological source context"
    ] ;
    sh:property [
        sh:path guidance:targetContext ;
        sh:minCount 1 ;
        sh:message "Must specify ontological target context"
    ] ;
    sh:property [
        sh:path rdfs:comment ;
        sh:minCount 1 ;
        sh:message "Must provide management principles"
    ] .

# Pattern Relationships
guidance:hasTreeState a owl:ObjectProperty ;
    rdfs:label "has tree state" ;
    rdfs:domain owl:Class ;
    rdfs:range guidance:TreeState ;
    rdfs:comment "Links an element to its current tree state" .

guidance:contextSwitchCost a owl:DatatypeProperty ;
    rdfs:label "context switch cost" ;
    rdfs:domain guidance:OrganicNetworkPattern ;
    rdfs:range xsd:integer ;
    rdfs:comment "Relative cost of switching between contexts" .

guidance:maintenanceCost a owl:DatatypeProperty ;
    rdfs:label "maintenance cost" ;
    rdfs:domain guidance:OrganicNetworkPattern ;
    rdfs:range xsd:integer ;
    rdfs:comment "Relative cost of maintaining connections" .

# Development Environment
guidance:DevelopmentEnvironment rdf:type owl:Class ;
    rdfs:label "Development Environment" ;
    rdfs:comment "Configuration and tools for development" .

guidance:CursorRule rdf:type owl:Class ;
    rdfs:subClassOf guidance:DevelopmentEnvironment ;
    rdfs:label "Cursor Rule" ;
    rdfs:comment "Rule for Cursor AI assistance" .

guidance:RuleUsage rdf:type owl:Class ;
    rdfs:label "Rule Usage" ;
    rdfs:comment "Instructions for using Cursor rules" .

# Individuals
guidance:SPARQLQueryUsage rdf:type guidance:RuleUsage ;
    rdfs:label "SPARQL Query Usage" ;
    rdfs:comment "How to use SPARQL queries with Cursor" ;
    guidance:hasStep [
        rdf:type guidance:Step ;
        guidance:stepNumber "1"^^xsd:integer ;
        rdfs:label "Create Query File" ;
        rdfs:comment "Create a .rq file with your SPARQL query"
    ] ;
    guidance:hasStep [
        rdf:type guidance:Step ;
        guidance:stepNumber "2"^^xsd:integer ;
        rdfs:label "Include Prefixes" ;
        rdfs:comment "Add standard RDF/RDFS/OWL prefixes"
    ] ;
    guidance:hasStep [
        rdf:type guidance:Step ;
        guidance:stepNumber "3"^^xsd:integer ;
        rdfs:label "Execute Query" ;
        rdfs:comment "Use Cursor to run the query against a TTL file"
    ] .

guidance:BlackFormatterUsage rdf:type guidance:RuleUsage ;
    rdfs:label "Black Formatter Usage" ;
    rdfs:comment "How to use Black formatting with Cursor" ;
    guidance:hasStep [
        rdf:type guidance:Step ;
        guidance:stepNumber "1"^^xsd:integer ;
        rdfs:label "Open Python File" ;
        rdfs:comment "Open a .py file in Cursor"
    ] ;
    guidance:hasStep [
        rdf:type guidance:Step ;
        guidance:stepNumber "2"^^xsd:integer ;
        rdfs:label "Format Code" ;
        rdfs:comment "Use Black to format the code according to rules"
    ] .

# Properties
guidance:hasStep rdf:type owl:ObjectProperty ;
    rdfs:label "Has Step" ;
    rdfs:comment "Links usage instructions to steps" ;
    rdfs:domain guidance:RuleUsage ;
    rdfs:range guidance:Step .

guidance:stepNumber rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Number" ;
    rdfs:comment "Order number of the step" ;
    rdfs:domain guidance:Step ;
    rdfs:range xsd:integer .

# Core Classes
guidance:Pattern a owl:Class ;
    rdfs:label "Pattern"@en ;
    rdfs:comment "A reusable design or implementation pattern" .

guidance:SecurityPattern a owl:Class ;
    rdfs:label "Security Pattern"@en ;
    rdfs:comment "A pattern for implementing security features" ;
    rdfs:subClassOf guidance:Pattern .

guidance:AuthenticationPattern a owl:Class ;
    rdfs:label "Authentication Pattern"@en ;
    rdfs:comment "A pattern for implementing authentication" ;
    rdfs:subClassOf guidance:SecurityPattern .

guidance:KeyManagementPattern a owl:Class ;
    rdfs:label "Key Management Pattern"@en ;
    rdfs:comment "A pattern for managing cryptographic keys" ;
    rdfs:subClassOf guidance:SecurityPattern .

# Properties
guidance:implements a owl:ObjectProperty ;
    rdfs:domain guidance:Pattern ;
    rdfs:range solution:Solution .

guidance:requires a owl:ObjectProperty ;
    rdfs:domain guidance:Pattern ;
    rdfs:range guidance:Pattern .

guidance:recommends a owl:ObjectProperty ;
    rdfs:domain guidance:Pattern ;
    rdfs:range guidance:Pattern .

# Pattern Instances
guidance:RSAKeyPairAuth a guidance:AuthenticationPattern ;
    rdfs:label "RSA Key Pair Authentication"@en ;
    rdfs:comment "Authentication using RSA key pairs" ;
    guidance:requires guidance:SecureKeyStorage ;
    guidance:recommends guidance:KeyRotation .

guidance:SecureKeyStorage a guidance:KeyManagementPattern ;
    rdfs:label "Secure Key Storage"@en ;
    rdfs:comment "Pattern for securely storing cryptographic keys" ;
    guidance:recommends guidance:KeyEncryption .

guidance:KeyRotation a guidance:KeyManagementPattern ;
    rdfs:label "Key Rotation"@en ;
    rdfs:comment "Pattern for regularly rotating cryptographic keys" ;
    guidance:requires guidance:SecureKeyStorage .

guidance:KeyEncryption a guidance:KeyManagementPattern ;
    rdfs:label "Key Encryption"@en ;
    rdfs:comment "Pattern for encrypting stored keys" .

# Best Practices
guidance:BestPractices a owl:Class ;
    rdfs:label "Best Practices"@en ;
    rdfs:comment "Collection of security best practices" .

guidance:SecurityBestPractices a guidance:BestPractices ;
    rdfs:label "Security Best Practices"@en ;
    guidance:practice [
        rdfs:label "Private Key Protection"@en ;
        rdfs:comment "Store private keys with 600 permissions and never commit to VCS"
    ] ;
    guidance:practice [
        rdfs:label "Key Format Standards"@en ;
        rdfs:comment "Use PKCS#8 format for private keys and PEM format for storage"
    ] ;
    guidance:practice [
        rdfs:label "Environment Variables"@en ;
        rdfs:comment "Use environment variables for sensitive configuration"
    ] ;
    guidance:practice [
        rdfs:label "Key Rotation Schedule"@en ;
        rdfs:comment "Implement regular key rotation with proper procedures"
    ] .

# Accessibility Testing Pattern
guidance:AccessibilityTestingPattern rdf:type owl:Class ;
    rdfs:label "Accessibility Testing Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for testing ontology accessibility and cross-references" .

guidance:TestCase rdf:type owl:Class ;
    rdfs:label "Test Case" ;
    rdfs:comment "A specific test case for ontology validation" .

guidance:hasTestQuery rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:TestCase ;
    rdfs:range xsd:string ;
    rdfs:comment "The SPARQL query used in the test case" .

guidance:hasExpectedResult rdf:type owl:DatatypeProperty ;
    rdfs:domain guidance:TestCase ;
    rdfs:range xsd:string ;
    rdfs:comment "Expected result or assertion for the test case" .

# Test Cases from test_ontology_accessibility.py
guidance:PolicyStructureTest rdf:type guidance:TestCase ;
    rdfs:label "Policy Structure Test" ;
    rdfs:comment "Tests that policies drive requirements that influence decisions" ;
    guidance:hasTestQuery """
    SELECT ?policy ?req ?decision WHERE {
        ?policy rdf:type pdi:Policy ;
                pdi:drivesRequirement ?req .
        ?req pdi:influencesDecision ?decision .
    }""" ;
    guidance:hasExpectedResult "Should find OntologyAccessibilityPolicy and its requirements" .

guidance:EnforcementMechanismsTest rdf:type guidance:TestCase ;
    rdfs:label "Enforcement Mechanisms Test" ;
    rdfs:comment "Tests that enforcement mechanisms are properly defined" ;
    guidance:hasTestQuery """
    SELECT ?mech ?impl ?pattern WHERE {
        ?mech rdf:type pdi:EnforcementMechanism ;
              pdi:implementedIn ?impl ;
              pdi:usesPattern ?pattern .
    }""" ;
    guidance:hasExpectedResult "Should find at least 3 enforcement mechanisms" .

guidance:CognitivePatternsTest rdf:type guidance:TestCase ;
    rdfs:label "Cognitive Patterns Test" ;
    rdfs:comment "Tests cognitive pattern definitions and relationships" ;
    guidance:hasTestQuery """
    SELECT ?pattern ?context ?complexity WHERE {
        ?pattern rdf:type ?type .
        ?type rdfs:subClassOf cog:Pattern .
        ?pattern cog:hasContext ?context ;
                cog:hasComplexity ?complexity .
    }""" ;
    guidance:hasExpectedResult "Should find at least 3 cognitive patterns" .

guidance:MetaPatternTest rdf:type guidance:TestCase ;
    rdfs:label "Meta Pattern Test" ;
    rdfs:comment "Tests that meta patterns properly relate to other patterns" ;
    guidance:hasTestQuery """
    SELECT ?meta ?related WHERE {
        ?meta rdf:type cog:MetaPattern ;
              cog:relatesTo ?related .
    }""" ;
    guidance:hasExpectedResult "Should find at least 1 meta pattern relationship" .

guidance:CrossReferencesTest rdf:type guidance:TestCase ;
    rdfs:label "Cross References Test" ;
    rdfs:comment "Tests cross-referencing between ontologies" ;
    guidance:hasTestQuery """
    SELECT ?mech ?pattern WHERE {
        ?mech rdf:type pdi:EnforcementMechanism ;
              pdi:usesPattern ?pattern .
        {
            ?pattern rdf:type cog:EmergentPattern .
        } UNION {
            FILTER(?pattern = cog:EmergentPattern)
        } UNION {
            FILTER(CONTAINS(str(?pattern), "EmergentPattern"))
        }
        FILTER(CONTAINS(str(?mech), "CrossRefTrackerMechanism"))
    }""" ;
    guidance:hasExpectedResult "Should find CrossRefTrackerMechanism using EmergentPattern" .

# Accessibility Testing Guidance
guidance:accessibilityTestingGuidance rdf:type owl:NamedIndividual ;
    rdf:type guidance:AccessibilityTestingPattern ;
    rdfs:label "Accessibility Testing Guidance" ;
    guidance:sourceContext "Ontology Testing" ;
    guidance:targetContext "Accessibility Validation" ;
    guidance:complexity "3"^^xsd:integer ;
    rdfs:comment """Best practices for ontology accessibility testing:
1. Test policy structure and requirement chains
2. Validate enforcement mechanism implementations
3. Check cognitive pattern relationships
4. Verify meta-pattern connections
5. Ensure proper cross-references between ontologies
6. Test pattern complexity constraints
7. Validate SHACL shapes
8. Use base URI resolution for file paths
9. Include debug queries for troubleshooting
10. Test both direct and indirect pattern relationships""" .

# SHACL Validation for Test Cases
guidance:TestCaseShape rdf:type sh:NodeShape ;
    sh:targetClass guidance:TestCase ;
    sh:property [
        sh:path guidance:hasTestQuery ;
        sh:minCount 1 ;
        sh:message "Every test case must have a SPARQL query"
    ] ;
    sh:property [
        sh:path guidance:hasExpectedResult ;
        sh:minCount 1 ;
        sh:message "Every test case must specify expected results"
    ] .

# Configuration Management Pattern
guidance:ConfigurationManagementPattern a owl:Class ;
    rdfs:label "Configuration Management Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for managing project configuration files" .

guidance:OntologyConfigurationPattern a owl:Class ;
    rdfs:label "Ontology Configuration Pattern" ;
    rdfs:subClassOf guidance:ConfigurationManagementPattern ;
    rdfs:comment "Pattern for managing ontology configurations through .ontologies file" .

# Properties for .ontologies configuration
guidance:hasConfigurationFile a owl:ObjectProperty ;
    rdfs:label "Has Configuration File" ;
    rdfs:domain guidance:OntologyConfigurationPattern ;
    rdfs:range guidance:ConfigurationFile ;
    rdfs:comment "Links a pattern to its configuration file definition" .

guidance:configurationKey a owl:DatatypeProperty ;
    rdfs:label "Configuration Key" ;
    rdfs:domain guidance:ConfigurationFile ;
    rdfs:range xsd:string ;
    rdfs:comment "Key in the configuration file" .

guidance:configurationValue a owl:DatatypeProperty ;
    rdfs:label "Configuration Value" ;
    rdfs:domain guidance:ConfigurationFile ;
    rdfs:range xsd:string ;
    rdfs:comment "Value for the configuration key" .

# .ontologies Configuration Instance
guidance:OntologiesFilePattern a owl:NamedIndividual ;
    rdf:type guidance:OntologyConfigurationPattern ;
    rdfs:label ".ontologies Configuration Pattern" ;
    guidance:sourceContext "Project Configuration" ;
    guidance:targetContext "Ontology Management" ;
    guidance:complexity "1"^^xsd:integer ;
    rdfs:comment """Best practices for .ontologies file:
1. Must define PROJECT_ONTOLOGY as the root ontology
2. CORE_ONTOLOGIES lists fundamental, reusable ontologies
3. PROJECT_SPECIFIC_ONTOLOGIES lists project-specific ontologies
4. All ontologies must be directly or transitively related to PROJECT_ONTOLOGY
5. Update when adding or removing ontology files
6. Keep in project root directory
7. Use with version control
8. Validate relationships before adding""" .

# Configuration File Structure
guidance:OntologiesFile a guidance:ConfigurationFile ;
    rdfs:label ".ontologies" ;
    guidance:configurationKey "PROJECT_ONTOLOGY" ;
    guidance:configurationValue "Root ontology file (e.g., chatbot.ttl)" ;
    guidance:configurationKey "CORE_ONTOLOGIES" ;
    guidance:configurationValue "Comma-separated list of core ontology files" ;
    guidance:configurationKey "PROJECT_SPECIFIC_ONTOLOGIES" ;
    guidance:configurationValue "Comma-separated list of project-specific ontology files" ;
    guidance:requiredValidation [
        rdf:_1 "All listed files must exist" ;
        rdf:_2 "All ontologies must be reachable from PROJECT_ONTOLOGY" ;
        rdf:_3 "Core ontologies must be properly imported" ;
        rdf:_4 "Project-specific ontologies must have clear relationships"
    ] .

# SHACL Validation for .ontologies
guidance:OntologiesFileShape a sh:NodeShape ;
    sh:targetClass guidance:OntologiesFile ;
    sh:property [
        sh:path guidance:configurationKey ;
        sh:minCount 3 ;
        sh:message "Must define PROJECT_ONTOLOGY, CORE_ONTOLOGIES, and PROJECT_SPECIFIC_ONTOLOGIES"
    ] ;
    sh:property [
        sh:path guidance:configurationValue ;
        sh:minCount 3 ;
        sh:message "Must provide values for all configuration keys"
    ] .

# Usage Examples
guidance:OntologiesUsageExample a owl:NamedIndividual ;
    rdf:type guidance:Example ;
    rdfs:label ".ontologies Usage Example" ;
    guidance:exampleContent """
# Example .ontologies file
PROJECT_ONTOLOGY=chatbot.ttl

# Core ontologies that provide fundamental concepts and patterns
CORE_ONTOLOGIES=guidance.ttl,meta.ttl,metameta.ttl,problem.ttl,solution.ttl,conversation.ttl,session.ttl

# Project-specific ontologies
PROJECT_SPECIFIC_ONTOLOGIES=cortexteams.ttl,deployment_validation.ttl,deployment_config.ttl
""" ;
    guidance:validationSteps [
        rdf:_1 "Verify PROJECT_ONTOLOGY exists" ;
        rdf:_2 "Check all CORE_ONTOLOGIES are present" ;
        rdf:_3 "Validate PROJECT_SPECIFIC_ONTOLOGIES relationships" ;
        rdf:_4 "Ensure no circular dependencies" ;
        rdf:_5 "Verify imports in ontology files"
    ] .

# Integration with Other Patterns
guidance:OntologiesFilePattern
    guidance:requires guidance:VersioningBestPractice ;
    guidance:recommends guidance:DocumentationPattern ;
    guidance:implements [
        rdf:type guidance:Implementation ;
        rdfs:label "Configuration Management" ;
        guidance:implementationSteps [
            rdf:_1 "Place .ontologies in project root" ;
            rdf:_2 "Define PROJECT_ONTOLOGY first" ;
            rdf:_3 "List CORE_ONTOLOGIES in dependency order" ;
            rdf:_4 "Add PROJECT_SPECIFIC_ONTOLOGIES as needed" ;
            rdf:_5 "Validate relationships after changes"
        ]
    ] .

# Session Logging Pattern
guidance:SessionLoggingPattern a owl:Class ;
    rdfs:label "Session Logging Pattern" ;
    rdfs:subClassOf guidance:BestPractice ;
    rdfs:comment "Pattern for maintaining session history and context changes" .

guidance:SessionLogEntry a owl:Class ;
    rdfs:label "Session Log Entry" ;
    rdfs:comment "An entry in the session log recording a change to session.ttl" .

# Properties for session logging
guidance:hasActor a owl:ObjectProperty ;
    rdfs:label "Has Actor" ;
    rdfs:domain guidance:SessionLogEntry ;
    rdfs:range [
        rdf:type owl:Class ;
        owl:unionOf (guidance:HumanActor guidance:AIActor)
    ] ;
    rdfs:comment "Who/what made the change" .

guidance:hasTimestamp a owl:DatatypeProperty ;
    rdfs:label "Has Timestamp" ;
    rdfs:domain guidance:SessionLogEntry ;
    rdfs:range xsd:dateTime ;
    rdfs:comment "When the change was made" .

guidance:hasPriorState a owl:ObjectProperty ;
    rdfs:label "Has Prior State" ;
    rdfs:domain guidance:SessionLogEntry ;
    rdfs:range owl:Thing ;
    rdfs:comment "The previous state of the changed elements" .

guidance:hasChangeReason a owl:DatatypeProperty ;
    rdfs:label "Has Change Reason" ;
    rdfs:domain guidance:SessionLogEntry ;
    rdfs:range xsd:string ;
    rdfs:comment "Why the change was made" .

guidance:hasChangeContext a owl:ObjectProperty ;
    rdfs:label "Has Change Context" ;
    rdfs:domain guidance:SessionLogEntry ;
    rdfs:range guidance:ChangeContext ;
    rdfs:comment "The context in which the change was made" .

# Session Log Management Pattern
guidance:SessionLogManagementPattern a owl:NamedIndividual ;
    rdf:type guidance:SessionLoggingPattern ;
    rdfs:label "Session Log Management Pattern" ;
    guidance:sourceContext "Session State Management" ;
    guidance:targetContext "Session History Tracking" ;
    guidance:complexity "2"^^xsd:integer ;
    rdfs:comment """Best practices for session log management:
1. Every change to session.ttl must be logged in session_log.ttl
2. Log entries must include who/what made the change
3. Log entries must include timestamp in ISO format
4. Log entries must preserve prior state
5. Log entries must document reason for change
6. Log entries must maintain context chain
7. Use SPARQL for historical queries
8. Maintain log entry order
9. Never modify existing log entries
10. Link log entries to relevant tasks/issues""" .

# SHACL Validation for Session Log
guidance:SessionLogEntryShape a sh:NodeShape ;
    sh:targetClass guidance:SessionLogEntry ;
    sh:property [
        sh:path guidance:hasActor ;
        sh:minCount 1 ;
        sh:message "Log entry must specify who/what made the change"
    ] ;
    sh:property [
        sh:path guidance:hasTimestamp ;
        sh:minCount 1 ;
        sh:datatype xsd:dateTime ;
        sh:message "Log entry must have ISO format timestamp"
    ] ;
    sh:property [
        sh:path guidance:hasPriorState ;
        sh:minCount 1 ;
        sh:message "Log entry must preserve prior state"
    ] ;
    sh:property [
        sh:path guidance:hasChangeReason ;
        sh:minCount 1 ;
        sh:message "Log entry must document reason for change"
    ] .

# Example Queries
guidance:SessionLogQueries a owl:NamedIndividual ;
    rdf:type guidance:Example ;
    rdfs:label "Session Log Query Examples" ;
    guidance:exampleContent """
# Query for changes by specific actor
SELECT ?entry ?timestamp ?reason
WHERE {
    ?entry a guidance:SessionLogEntry ;
           guidance:hasActor ?actor ;
           guidance:hasTimestamp ?timestamp ;
           guidance:hasChangeReason ?reason .
    FILTER(?actor = ex:SpecificActor)
}
ORDER BY DESC(?timestamp)

# Query for state at specific time
SELECT ?state
WHERE {
    ?entry a guidance:SessionLogEntry ;
           guidance:hasTimestamp ?timestamp ;
           guidance:hasPriorState ?state .
    FILTER(?timestamp <= "2024-03-20T00:00:00Z"^^xsd:dateTime)
}
ORDER BY DESC(?timestamp)
LIMIT 1
""" .

# Integration with Session Management
guidance:SessionLogPattern
    guidance:requires guidance:SessionManagementPattern ;
    guidance:recommends guidance:VersioningBestPractice ;
    guidance:implements [
        rdf:type guidance:Implementation ;
        rdfs:label "Session Log Management" ;
        guidance:implementationSteps [
            rdf:_1 "Create session_log.ttl if not exists" ;
            rdf:_2 "Log current state before changes" ;
            rdf:_3 "Update session.ttl" ;
            rdf:_4 "Create log entry with complete metadata" ;
            rdf:_5 "Validate log entry" ;
            rdf:_6 "Update relevant cross-references"
        ]
    ] .
