@prefix : <./guidance#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix meta: <./meta#> .
@prefix modules: <./guidance/modules#> .
@prefix core: <./guidance/modules/core#> .
@prefix model: <./guidance/modules/model#> .
@prefix security: <./guidance/modules/security#> .
@prefix validation: <./guidance/modules/validation#> .
@prefix collaboration: <./guidance/modules/collaboration#> .
@prefix testing: <./guidance/modules/testing#> .
@prefix sparql: <./guidance/modules/sparql_service#> .
@prefix env: <./guidance/modules/environment#> .
@prefix deploy: <./guidance/modules/deployment_validation#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

# Proxy Ontology Definition
:GuidanceOntology rdf:type owl:Ontology ;
    rdfs:label "Guidance Ontology" ;
    rdfs:comment "Main guidance ontology that imports and coordinates all guidance modules" ;
    dc:title "Guidance Ontology" ;
    dc:version "1.0.0" ;
    owl:versionInfo "1.0.0" ;
    dct:created "2024-03-21T00:00:00"^^xsd:dateTime ;
    dct:modified "2024-03-21T00:00:00"^^xsd:dateTime ;
    dct:publisher "Ontology Framework Project" ;
    dct:description "Modular guidance system for ontology development and management" ;
    owl:imports <./guidance/modules/core.ttl> ;
    owl:imports <./guidance/modules/model.ttl> ;
    owl:imports <./guidance/modules/security.ttl> ;
    owl:imports <./guidance/modules/validation.ttl> ;
    owl:imports <./guidance/modules/collaboration.ttl> ;
    owl:imports <./guidance/modules/sparql_service.ttl> ;
    owl:imports <./guidance/modules/environment.ttl> ;
    owl:imports <./guidance/modules/deployment_validation.ttl> .

# Module Registry
:ModuleRegistry rdf:type owl:Class ;
    rdfs:label "Module Registry" ;
    rdfs:comment "Registry of all guidance modules" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology ;
    rdfs:seeAlso <./guidance/modules/core.ttl> .

:registeredModule rdf:type owl:ObjectProperty ;
    rdfs:label "Registered Module" ;
    rdfs:comment "Links the registry to registered modules" ;
    rdfs:domain :ModuleRegistry ;
    rdfs:range owl:Ontology ;
    owl:versionInfo "1.0.0" .

:moduleVersion rdf:type owl:DatatypeProperty ;
    rdfs:label "Module Version" ;
    rdfs:comment "Version of a registered module" ;
    rdfs:domain owl:Ontology ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:moduleDescription rdf:type owl:DatatypeProperty ;
    rdfs:label "Module Description" ;
    rdfs:comment "Description of a registered module" ;
    rdfs:domain owl:Ontology ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# Module Registry Instance
:guidanceModuleRegistry rdf:type owl:NamedIndividual, :ModuleRegistry ;
    rdfs:label "Guidance Module Registry" ;
    rdfs:comment "Registry of all guidance modules" ;
    :registeredModule core:CoreGuidanceModule ;
    :registeredModule model:ModelGuidanceModule ;
    :registeredModule security:SecurityGuidanceModule ;
    :registeredModule validation:ValidationGuidanceModule ;
    :registeredModule collaboration:CollaborationGuidanceModule ;
    :registeredModule sparql:SparqlServiceModule ;
    :registeredModule env:EnvironmentModule ;
    :registeredModule deploy:DeploymentValidationModule .

# Legacy Support
:LegacySupport rdf:type owl:Class ;
    rdfs:label "Legacy Support" ;
    rdfs:comment "Support for legacy guidance concepts" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology ;
    rdfs:seeAlso <./guidance/modules/core.ttl> .

:hasLegacyMapping rdf:type owl:ObjectProperty ;
    rdfs:label "Has Legacy Mapping" ;
    rdfs:comment "Maps legacy concepts to their modular equivalents" ;
    rdfs:domain :LegacySupport ;
    rdfs:range owl:Thing ;
    owl:versionInfo "1.0.0" .

:legacyGuidanceSupport rdf:type owl:NamedIndividual, :LegacySupport ;
    rdfs:label "Legacy Guidance Support" ;
    rdfs:comment "Maintains backward compatibility with legacy guidance" ;
    :hasLegacyMapping core:CoreGuidanceModule ;
    :hasLegacyMapping model:ModelGuidanceModule ;
    :hasLegacyMapping security:SecurityGuidanceModule ;
    :hasLegacyMapping validation:ValidationGuidanceModule ;
    :hasLegacyMapping collaboration:CollaborationGuidanceModule .

# SHACL Shapes
:ModuleRegistryShape a sh:NodeShape ;
    sh:targetClass :ModuleRegistry ;
    sh:property [
        sh:path :registeredModule ;
        sh:class owl:Ontology ;
        sh:minCount 1 ;
        sh:message "Module registry must have at least one registered module" ;
    ] .

:ModuleShape a sh:NodeShape ;
    sh:targetClass owl:Ontology ;
    sh:property [
        sh:path :moduleVersion ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "[0-9]+[.][0-9]+[.][0-9]+" ;
        sh:message "Module must have exactly one version in semantic versioning format" ;
    ] ,
    [
        sh:path :moduleDescription ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Module must have a description" ;
    ] .

:LegacySupportShape a sh:NodeShape ;
    sh:targetClass :LegacySupport ;
    sh:property [
        sh:path :hasLegacyMapping ;
        sh:class owl:Thing ;
        sh:minCount 1 ;
        sh:message "Legacy support must have at least one mapping" ;
    ] .

# Model Conformance Rules
:ModelConformance rdf:type owl:Class ;
    rdfs:label "Model Conformance" ;
    rdfs:comment "Rules for ensuring model consistency and integration" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:hasConformanceCheck rdf:type owl:ObjectProperty ;
    rdfs:label "Has Conformance Check" ;
    rdfs:comment "Links a model to its conformance validation rules" ;
    rdfs:domain owl:Ontology ;
    rdfs:range :ModelConformance ;
    owl:versionInfo "1.0.0" .

:conformanceLevel rdf:type owl:DatatypeProperty ;
    rdfs:label "Conformance Level" ;
    rdfs:comment "Level of conformance required (STRICT, MODERATE, RELAXED)" ;
    rdfs:domain :ModelConformance ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:requiresPrefixValidation rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Prefix Validation" ;
    rdfs:comment "Whether prefix validation is required" ;
    rdfs:domain :ModelConformance ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresNamespaceValidation rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Namespace Validation" ;
    rdfs:comment "Whether namespace validation is required" ;
    rdfs:domain :ModelConformance ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

# Integration Process Rules
:IntegrationProcess rdf:type owl:Class ;
    rdfs:label "Integration Process" ;
    rdfs:comment "Rules for model integration and version management" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:hasIntegrationStep rdf:type owl:ObjectProperty ;
    rdfs:label "Has Integration Step" ;
    rdfs:comment "Links to specific integration process steps" ;
    rdfs:domain :IntegrationProcess ;
    rdfs:range :IntegrationStep ;
    owl:versionInfo "1.0.0" .

:IntegrationStep rdf:type owl:Class ;
    rdfs:label "Integration Step" ;
    rdfs:comment "A step in the model integration process" ;
    owl:versionInfo "1.0.0" .

:stepOrder rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Order" ;
    rdfs:comment "Order of execution for integration steps" ;
    rdfs:domain :IntegrationStep ;
    rdfs:range xsd:integer ;
    owl:versionInfo "1.0.0" .

:stepDescription rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Description" ;
    rdfs:comment "Description of the integration step" ;
    rdfs:domain :IntegrationStep ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Model Conformance
:ModelConformanceShape a sh:NodeShape ;
    sh:targetClass :ModelConformance ;
    sh:property [
        sh:path :conformanceLevel ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("STRICT" "MODERATE" "RELAXED") ;
        sh:message "Conformance level must be STRICT, MODERATE, or RELAXED" ;
    ] ,
    [
        sh:path :requiresPrefixValidation ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether prefix validation is required" ;
    ] ,
    [
        sh:path :requiresNamespaceValidation ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether namespace validation is required" ;
    ] .

# SHACL Shapes for Integration Process
:IntegrationProcessShape a sh:NodeShape ;
    sh:targetClass :IntegrationProcess ;
    sh:property [
        sh:path :hasIntegrationStep ;
        sh:class :IntegrationStep ;
        sh:minCount 1 ;
        sh:message "Integration process must have at least one step" ;
    ] .

:IntegrationStepShape a sh:NodeShape ;
    sh:targetClass :IntegrationStep ;
    sh:property [
        sh:path :stepOrder ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 1 ;
        sh:message "Step must have a positive integer order" ;
    ] ,
    [
        sh:path :stepDescription ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Step must have a description" ;
    ] .

# Example Integration Process
:standardIntegrationProcess rdf:type owl:NamedIndividual, :IntegrationProcess ;
    rdfs:label "Standard Integration Process" ;
    rdfs:comment "Standard process for model integration" ;
    :hasIntegrationStep :prefixValidationStep ;
    :hasIntegrationStep :namespaceValidationStep ;
    :hasIntegrationStep :modelConformanceStep ;
    :hasIntegrationStep :versionAlignmentStep .

:prefixValidationStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Prefix Validation" ;
    rdfs:comment "Validate prefix usage against prefix management rules" ;
    :stepOrder 1 ;
    :stepDescription "Check prefix format, uniqueness, and URI patterns" .

:namespaceValidationStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Namespace Validation" ;
    rdfs:comment "Validate namespace usage and relationships" ;
    :stepOrder 2 ;
    :stepDescription "Verify namespace consistency and imports" .

:modelConformanceStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Model Conformance" ;
    rdfs:comment "Check model against conformance rules" ;
    :stepOrder 3 ;
    :stepDescription "Validate model structure and relationships" .

:versionAlignmentStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Version Alignment" ;
    rdfs:comment "Ensure version compatibility" ;
    :stepOrder 4 ;
    :stepDescription "Check version numbers and dependencies" .

# Example Conformance Rules
:strictConformance rdf:type owl:NamedIndividual, :ModelConformance ;
    rdfs:label "Strict Conformance" ;
    rdfs:comment "Strict conformance rules for model validation" ;
    :conformanceLevel "STRICT" ;
    :requiresPrefixValidation true ;
    :requiresNamespaceValidation true .

# Test Protocol Definition
:TestProtocol rdf:type owl:Class ;
    rdfs:label "Test Protocol" ;
    rdfs:comment "Formal definition of testing requirements and procedures" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:RequirementTestingDirective rdf:type owl:Class ;
    rdfs:label "Requirement Testing Directive" ;
    rdfs:comment "Directive specifying requirements testing coverage and validation" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:TestPhase rdf:type owl:Class ;
    rdfs:label "Test Phase" ;
    rdfs:comment "A phase in the testing protocol" ;
    owl:versionInfo "1.0.0" .

:TestCoverage rdf:type owl:Class ;
    rdfs:label "Test Coverage" ;
    rdfs:comment "Specification of required test coverage" ;
    owl:versionInfo "1.0.0" .

# Test Protocol Properties
:hasTestPhase rdf:type owl:ObjectProperty ;
    rdfs:label "Has Test Phase" ;
    rdfs:comment "Links test protocol to its phases" ;
    rdfs:domain :TestProtocol ;
    rdfs:range :TestPhase .

:hasTestCoverage rdf:type owl:ObjectProperty ;
    rdfs:label "Has Test Coverage" ;
    rdfs:comment "Links test protocol to coverage requirements" ;
    rdfs:domain :TestProtocol ;
    rdfs:range :TestCoverage .

:phaseOrder rdf:type owl:DatatypeProperty ;
    rdfs:label "Phase Order" ;
    rdfs:comment "Order of execution for test phases" ;
    rdfs:domain :TestPhase ;
    rdfs:range xsd:integer .

:coverageThreshold rdf:type owl:DatatypeProperty ;
    rdfs:label "Coverage Threshold" ;
    rdfs:comment "Required percentage of coverage" ;
    rdfs:domain :TestCoverage ;
    rdfs:range xsd:decimal .

:requirementTestingLevel rdf:type owl:DatatypeProperty ;
    rdfs:label "Requirement Testing Level" ;
    rdfs:comment "Required level of testing for requirements (FULL, PARTIAL)" ;
    rdfs:domain :RequirementTestingDirective ;
    rdfs:range xsd:string .

# Test Protocol Instance
:ontologyFrameworkTestProtocol rdf:type :TestProtocol ;
    rdfs:label "Ontology Framework Test Protocol" ;
    rdfs:comment "Standard test protocol for ontology framework components" ;
    :hasTestPhase :modelValidationPhase, :requirementValidationPhase, :integrationTestPhase ;
    :hasTestCoverage :standardCoverage .

:modelValidationPhase rdf:type :TestPhase ;
    rdfs:label "Model Validation Phase" ;
    rdfs:comment "Validate ontology model structure and constraints" ;
    :phaseOrder 1 ;
    validation:hasTestCase validation:ModelStructureTest .

:requirementValidationPhase rdf:type :TestPhase ;
    rdfs:label "Requirement Validation Phase" ;
    rdfs:comment "Validate requirements and their test coverage" ;
    :phaseOrder 2 ;
    validation:hasTestCase validation:RequirementCoverageTest .

:integrationTestPhase rdf:type :TestPhase ;
    rdfs:label "Integration Test Phase" ;
    rdfs:comment "Test integration between components" ;
    :phaseOrder 3 ;
    validation:hasTestCase validation:ComponentIntegrationTest .

:standardCoverage rdf:type :TestCoverage ;
    rdfs:label "Standard Coverage" ;
    rdfs:comment "Standard coverage requirements for ontology framework" ;
    :coverageThreshold "0.95"^^xsd:decimal .

# Requirement Testing Directive Instance
:comprehensiveTestingDirective rdf:type :RequirementTestingDirective ;
    rdfs:label "Comprehensive Testing Directive" ;
    rdfs:comment "Directive requiring comprehensive testing of all requirements" ;
    :requirementTestingLevel "FULL" ;
    validation:hasTestCase validation:RequirementComplianceTest .

# SHACL Shapes for Test Protocol
:TestProtocolShape a sh:NodeShape ;
    sh:targetClass :TestProtocol ;
    sh:property [
        sh:path :hasTestPhase ;
        sh:class :TestPhase ;
        sh:minCount 1 ;
        sh:message "Test protocol must have at least one phase"
    ] ,
    [
        sh:path :hasTestCoverage ;
        sh:class :TestCoverage ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Test protocol must specify coverage requirements"
    ] .

:TestPhaseShape a sh:NodeShape ;
    sh:targetClass :TestPhase ;
    sh:property [
        sh:path :phaseOrder ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 1 ;
        sh:message "Test phase must have a valid order"
    ] ,
    [
        sh:path validation:hasTestCase ;
        sh:class validation:TestCase ;
        sh:minCount 1 ;
        sh:message "Test phase must have at least one test case"
    ] .

:TestCoverageShape a sh:NodeShape ;
    sh:targetClass :TestCoverage ;
    sh:property [
        sh:path :coverageThreshold ;
        sh:datatype xsd:decimal ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 0 ;
        sh:maxInclusive 1 ;
        sh:message "Coverage threshold must be between 0 and 1"
    ] .

:RequirementTestingDirectiveShape a sh:NodeShape ;
    sh:targetClass :RequirementTestingDirective ;
    sh:property [
        sh:path :requirementTestingLevel ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("FULL" "PARTIAL") ;
        sh:message "Testing level must be either FULL or PARTIAL"
    ] .

# Additional Model Requirements
:ModelRequirements rdf:type owl:Class ;
    rdfs:label "Model Requirements" ;
    rdfs:comment "Additional requirements for model management" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:requiresVersionTracking rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Version Tracking" ;
    rdfs:comment "Whether version tracking is required for models" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresDependencyManagement rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Dependency Management" ;
    rdfs:comment "Whether dependency management is required" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresValidationPipeline rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Validation Pipeline" ;
    rdfs:comment "Whether a validation pipeline is required" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresDocumentation rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Documentation" ;
    rdfs:comment "Whether documentation is required" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Model Requirements
:ModelRequirementsShape a sh:NodeShape ;
    sh:targetClass :ModelRequirements ;
    sh:property [
        sh:path :requiresVersionTracking ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether version tracking is required" ;
    ] ,
    [
        sh:path :requiresDependencyManagement ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether dependency management is required" ;
    ] ,
    [
        sh:path :requiresValidationPipeline ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether validation pipeline is required" ;
    ] ,
    [
        sh:path :requiresDocumentation ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether documentation is required" ;
    ] .

# SHACL Pattern Syntax Rules
:ShaclPatternRule rdf:type owl:Class ;
    rdfs:label "SHACL Pattern Syntax Rules" ;
    rdfs:comment "Rules for writing SHACL patterns in Turtle syntax" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:hasPatternRule rdf:type owl:ObjectProperty ;
    rdfs:label "Has Pattern Rule" ;
    rdfs:comment "Links to specific SHACL pattern rules" ;
    rdfs:domain :ShaclPatternRule ;
    rdfs:range :PatternRule ;
    owl:versionInfo "1.0.0" .

:PatternRule rdf:type owl:Class ;
    rdfs:label "Pattern Rule" ;
    rdfs:comment "A specific rule for SHACL pattern syntax" ;
    owl:versionInfo "1.0.0" .

:ruleText rdf:type owl:DatatypeProperty ;
    rdfs:label "Rule Text" ;
    rdfs:comment "Text description of the rule" ;
    rdfs:domain :PatternRule ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:ruleExample rdf:type owl:DatatypeProperty ;
    rdfs:label "Rule Example" ;
    rdfs:comment "Example of correct pattern usage" ;
    rdfs:domain :PatternRule ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:ruleCounterExample rdf:type owl:DatatypeProperty ;
    rdfs:label "Rule Counter Example" ;
    rdfs:comment "Example of incorrect pattern usage" ;
    rdfs:domain :PatternRule ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Pattern Rules
:ShaclPatternRuleShape a sh:NodeShape ;
    sh:targetClass :ShaclPatternRule ;
    sh:property [
        sh:path :hasPatternRule ;
        sh:class :PatternRule ;
        sh:minCount 1 ;
        sh:message "Must have at least one pattern rule"
    ] .

:PatternRuleShape a sh:NodeShape ;
    sh:targetClass :PatternRule ;
    sh:property [
        sh:path :ruleText ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Must have rule text"
    ] ,
    [
        sh:path :ruleExample ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Must have an example"
    ] ,
    [
        sh:path :ruleCounterExample ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Must have a counter example"
    ] .

# Instances
:standardShaclPatternRules rdf:type owl:NamedIndividual, :ShaclPatternRule ;
    rdfs:label "Standard SHACL Pattern Rules" ;
    rdfs:comment "Standard rules for SHACL pattern syntax" ;
    :hasPatternRule :characterClassRule, :literalDotRule, :binaryStringRule .

:characterClassRule rdf:type owl:NamedIndividual, :PatternRule ;
    rdfs:label "Character Class Rule" ;
    rdfs:comment "Use character classes instead of escape sequences" ;
    :ruleText "Use character classes [0-9] instead of \\d" ;
    :ruleExample "[0-9]+[.][0-9]+[.][0-9]+" ;
    :ruleCounterExample "[0-9]+[.][0-9]+[.][0-9]+" .

:literalDotRule rdf:type owl:NamedIndividual, :PatternRule ;
    rdfs:label "Literal Dot Rule" ;
    rdfs:comment "Use [.] for literal dots" ;
    :ruleText "Use [.] for literal dots instead of \\." ;
    :ruleExample "[0-9]+[.][0-9]+" ;
    :ruleCounterExample "[0-9]+\\.\\d+" .

:binaryStringRule rdf:type owl:NamedIndividual, :PatternRule ;
    rdfs:label "Binary String Rule" ;
    rdfs:comment "Avoid binary string markers" ;
    :ruleText "Avoid binary string markers (b'...')" ;
    :ruleExample "sh:pattern \"[0-9]+\"" ;
    :ruleCounterExample "sh:pattern b'[0-9]+'" .

# Model Structure Requirements
:ModelStructureRule rdf:type owl:Class ;
    rdfs:label "Model Structure Requirements" ;
    rdfs:comment "Basic requirements for model structure validation" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:hasStructureRequirement rdf:type owl:ObjectProperty ;
    rdfs:label "Has Structure Requirement" ;
    rdfs:comment "Links to specific model structure requirements" ;
    rdfs:domain :ModelStructureRule ;
    rdfs:range :StructureRequirement ;
    owl:versionInfo "1.0.0" .

:StructureRequirement rdf:type owl:Class ;
    rdfs:label "Structure Requirement" ;
    rdfs:comment "A specific requirement for model structure" ;
    owl:versionInfo "1.0.0" .

:requirementText rdf:type owl:DatatypeProperty ;
    rdfs:label "Requirement Text" ;
    rdfs:comment "Text description of the requirement" ;
    rdfs:domain :StructureRequirement ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:validationQuery rdf:type owl:DatatypeProperty ;
    rdfs:label "Validation Query" ;
    rdfs:comment "Turtle pattern to validate the requirement" ;
    rdfs:domain :StructureRequirement ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Structure Requirements
:ModelStructureRuleShape a sh:NodeShape ;
    sh:targetClass :ModelStructureRule ;
    sh:property [
        sh:path :hasStructureRequirement ;
        sh:class :StructureRequirement ;
        sh:minCount 1 ;
        sh:message "Must have at least one structure requirement"
    ] .

:StructureRequirementShape a sh:NodeShape ;
    sh:targetClass :StructureRequirement ;
    sh:property [
        sh:path :requirementText ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Must have requirement text"
    ] ,
    [
        sh:path :validationQuery ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Must have a validation query"
    ] .

# Instances
:standardModelStructureRules rdf:type owl:NamedIndividual, :ModelStructureRule ;
    rdfs:label "Standard Model Structure Rules" ;
    rdfs:comment "Standard requirements for model structure" ;
    :hasStructureRequirement :classRequirement, :propertyRequirement .

:classRequirement rdf:type owl:NamedIndividual, :StructureRequirement ;
    rdfs:label "Class Requirement" ;
    rdfs:comment "Models must contain at least one class" ;
    :requirementText "Models must contain at least one owl:Class" ;
    :validationQuery """
        [] a owl:Class .
    """ .

:propertyRequirement rdf:type owl:NamedIndividual, :StructureRequirement ;
    rdfs:label "Property Requirement" ;
    rdfs:comment "Models must contain at least one object property" ;
    :requirementText "Models must contain at least one owl:ObjectProperty" ;
    :validationQuery """
        [] a owl:ObjectProperty .
    """ .

# Test Configuration
:TestConfiguration rdf:type owl:Class ;
    rdfs:label "Test Configuration" ;
    rdfs:comment "Configuration settings for test execution" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:testConfigFile rdf:type owl:DatatypeProperty ;
    rdfs:label "Test Configuration File" ;
    rdfs:comment "Path to the test configuration file" ;
    rdfs:domain :TestConfiguration ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:testEnvironment rdf:type owl:DatatypeProperty ;
    rdfs:label "Test Environment" ;
    rdfs:comment "Environment for test execution (development, staging, production)" ;
    rdfs:domain :TestConfiguration ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:testTimeout rdf:type owl:DatatypeProperty ;
    rdfs:label "Test Timeout" ;
    rdfs:comment "Maximum time allowed for test execution in seconds" ;
    rdfs:domain :TestConfiguration ;
    rdfs:range xsd:integer ;
    owl:versionInfo "1.0.0" .

# Test Procedure
:TestProcedure rdf:type owl:Class ;
    rdfs:label "Test Procedure" ;
    rdfs:comment "Standardized procedure for test execution" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:testStep rdf:type owl:ObjectProperty ;
    rdfs:label "Test Step" ;
    rdfs:comment "Individual step in the test procedure" ;
    rdfs:domain :TestProcedure ;
    rdfs:range :TestStep ;
    owl:versionInfo "1.0.0" .

:TestStep rdf:type owl:Class ;
    rdfs:label "Test Step" ;
    rdfs:comment "A step in the test procedure" ;
    owl:versionInfo "1.0.0" .

:stepType rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Type" ;
    rdfs:comment "Type of test step (setup, execution, validation, cleanup)" ;
    rdfs:domain :TestStep ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:stepCommand rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Command" ;
    rdfs:comment "Command to execute for this step" ;
    rdfs:domain :TestStep ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:stepExpectedResult rdf:type owl:DatatypeProperty ;
    rdfs:label "Expected Result" ;
    rdfs:comment "Expected outcome of the test step" ;
    rdfs:domain :TestStep ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# Test Report
:TestReport rdf:type owl:Class ;
    rdfs:label "Test Report" ;
    rdfs:comment "Report of test execution results" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:reportFile rdf:type owl:DatatypeProperty ;
    rdfs:label "Report File" ;
    rdfs:comment "Path to the test report file" ;
    rdfs:domain :TestReport ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:reportFormat rdf:type owl:DatatypeProperty ;
    rdfs:label "Report Format" ;
    rdfs:comment "Format of the test report (markdown, html, json)" ;
    rdfs:domain :TestReport ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Test Configuration
:TestConfigurationShape a sh:NodeShape ;
    sh:targetClass :TestConfiguration ;
    sh:property [
        sh:path :testConfigFile ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Test configuration must specify a configuration file" ;
    ] ,
    [
        sh:path :testEnvironment ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:in ("development" "staging" "production") ;
        sh:message "Test environment must be development, staging, or production" ;
    ] ,
    [
        sh:path :testTimeout ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:minInclusive 1 ;
        sh:message "Test timeout must be a positive integer" ;
    ] .

# SHACL Shapes for Test Procedure
:TestProcedureShape a sh:NodeShape ;
    sh:targetClass :TestProcedure ;
    sh:property [
        sh:path :testStep ;
        sh:class :TestStep ;
        sh:minCount 1 ;
        sh:message "Test procedure must have at least one step" ;
    ] .

:TestStepShape a sh:NodeShape ;
    sh:targetClass :TestStep ;
    sh:property [
        sh:path :stepType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:in ("setup" "execution" "validation" "cleanup") ;
        sh:message "Step type must be setup, execution, validation, or cleanup" ;
    ] ,
    [
        sh:path :stepCommand ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Step must have a command to execute" ;
    ] ,
    [
        sh:path :stepExpectedResult ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Step must have an expected result" ;
    ] .

# SHACL Shapes for Test Report
:TestReportShape a sh:NodeShape ;
    sh:targetClass :TestReport ;
    sh:property [
        sh:path :reportFile ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Test report must specify a report file" ;
    ] ,
    [
        sh:path :reportFormat ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:in ("markdown" "html" "json") ;
        sh:message "Report format must be markdown, html, or json" ;
    ] .

# Test Procedure Instance
:standardTestProcedure rdf:type owl:NamedIndividual, :TestProcedure ;
    rdfs:label "Standard Test Procedure" ;
    rdfs:comment "Standard procedure for running ontology framework tests" ;
    :testStep :setupStep ;
    :testStep :executionStep ;
    :testStep :validationStep ;
    :testStep :cleanupStep .

:setupStep rdf:type owl:NamedIndividual, :TestStep ;
    rdfs:label "Setup Step" ;
    rdfs:comment "Setup test environment and dependencies" ;
    :stepType "setup" ;
    :stepCommand "python -m pip install -e ." ;
    :stepExpectedResult "Package installed in development mode" .

:executionStep rdf:type owl:NamedIndividual, :TestStep ;
    rdfs:label "Execution Step" ;
    rdfs:comment "Execute the test suite" ;
    :stepType "execution" ;
    :stepCommand "python tests/run_tests.py" ;
    :stepExpectedResult "All tests executed with results" .

:validationStep rdf:type owl:NamedIndividual, :TestStep ;
    rdfs:label "Validation Step" ;
    rdfs:comment "Validate test results" ;
    :stepType "validation" ;
    :stepCommand "python -m pytest tests/ --tb=short -v" ;
    :stepExpectedResult "All tests passed" .

:cleanupStep rdf:type owl:NamedIndividual, :TestStep ;
    rdfs:label "Cleanup Step" ;
    rdfs:comment "Clean up test environment" ;
    :stepType "cleanup" ;
    :stepCommand "rm -rf .pytest_cache/ __pycache__/ .mypy_cache/" ;
    :stepExpectedResult "Test artifacts cleaned up" .

# Test Configuration Instance
:standardTestConfig rdf:type owl:NamedIndividual, :TestConfiguration ;
    rdfs:label "Standard Test Configuration" ;
    rdfs:comment "Standard configuration for ontology framework tests" ;
    :testConfigFile "pytest.ini" ;
    :testEnvironment "development" ;
    :testTimeout 300 .

# Test Report Instance
:standardTestReport rdf:type owl:NamedIndividual, :TestReport ;
    rdfs:label "Standard Test Report" ;
    rdfs:comment "Standard report format for test results" ;
    :reportFile "tests/test_report.md" ;
    :reportFormat "markdown" .
