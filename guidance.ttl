@prefix : <./guidance#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix meta: <./meta#> .
@prefix modules: <./guidance/modules#> .
@prefix core: <./guidance/modules/core#> .
@prefix model: <./guidance/modules/model#> .
@prefix security: <./guidance/modules/security#> .
@prefix validation: <./guidance/modules/validation#> .
@prefix collaboration: <./guidance/modules/collaboration#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

# Proxy Ontology Definition
:GuidanceOntology rdf:type owl:Ontology ;
    rdfs:label "Guidance Ontology" ;
    rdfs:comment "Main guidance ontology that imports and coordinates all guidance modules" ;
    dc:title "Guidance Ontology" ;
    dc:version "1.0.0" ;
    owl:versionInfo "1.0.0" ;
    dct:created "2024-03-21T00:00:00"^^xsd:dateTime ;
    dct:modified "2024-03-21T00:00:00"^^xsd:dateTime ;
    dct:publisher "Ontology Framework Project" ;
    dct:description "Modular guidance system for ontology development and management" ;
    owl:imports <./guidance/modules/core.ttl> ;
    owl:imports <./guidance/modules/model.ttl> ;
    owl:imports <./guidance/modules/security.ttl> ;
    owl:imports <./guidance/modules/validation.ttl> ;
    owl:imports <./guidance/modules/collaboration.ttl> .

# Module Registry
:ModuleRegistry rdf:type owl:Class ;
    rdfs:label "Module Registry" ;
    rdfs:comment "Registry of all guidance modules" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology ;
    rdfs:seeAlso <./guidance/modules/core.ttl> .

:registeredModule rdf:type owl:ObjectProperty ;
    rdfs:label "Registered Module" ;
    rdfs:comment "Links the registry to registered modules" ;
    rdfs:domain :ModuleRegistry ;
    rdfs:range owl:Ontology ;
    owl:versionInfo "1.0.0" .

:moduleVersion rdf:type owl:DatatypeProperty ;
    rdfs:label "Module Version" ;
    rdfs:comment "Version of a registered module" ;
    rdfs:domain owl:Ontology ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:moduleDescription rdf:type owl:DatatypeProperty ;
    rdfs:label "Module Description" ;
    rdfs:comment "Description of a registered module" ;
    rdfs:domain owl:Ontology ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# Module Registry Instance
:guidanceModuleRegistry rdf:type owl:NamedIndividual, :ModuleRegistry ;
    rdfs:label "Guidance Module Registry" ;
    rdfs:comment "Registry of all guidance modules" ;
    :registeredModule core:CoreGuidanceModule ;
    :registeredModule model:ModelGuidanceModule ;
    :registeredModule security:SecurityGuidanceModule ;
    :registeredModule validation:ValidationGuidanceModule ;
    :registeredModule collaboration:CollaborationGuidanceModule .

# Legacy Support
:LegacySupport rdf:type owl:Class ;
    rdfs:label "Legacy Support" ;
    rdfs:comment "Support for legacy guidance concepts" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology ;
    rdfs:seeAlso <./guidance/modules/core.ttl> .

:hasLegacyMapping rdf:type owl:ObjectProperty ;
    rdfs:label "Has Legacy Mapping" ;
    rdfs:comment "Maps legacy concepts to their modular equivalents" ;
    rdfs:domain :LegacySupport ;
    rdfs:range owl:Thing ;
    owl:versionInfo "1.0.0" .

:legacyGuidanceSupport rdf:type owl:NamedIndividual, :LegacySupport ;
    rdfs:label "Legacy Guidance Support" ;
    rdfs:comment "Maintains backward compatibility with legacy guidance" ;
    :hasLegacyMapping core:CoreGuidanceModule ;
    :hasLegacyMapping model:ModelGuidanceModule ;
    :hasLegacyMapping security:SecurityGuidanceModule ;
    :hasLegacyMapping validation:ValidationGuidanceModule ;
    :hasLegacyMapping collaboration:CollaborationGuidanceModule .

# SHACL Shapes
:ModuleRegistryShape a sh:NodeShape ;
    sh:targetClass :ModuleRegistry ;
    sh:property [
        sh:path :registeredModule ;
        sh:class owl:Ontology ;
        sh:minCount 1 ;
        sh:message "Module registry must have at least one registered module" ;
    ] .

:ModuleShape a sh:NodeShape ;
    sh:targetClass owl:Ontology ;
    sh:property [
        sh:path :moduleVersion ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:pattern "^\\d+\\.\\d+\\.\\d+$" ;
        sh:message "Module must have exactly one version in semantic versioning format" ;
    ] ,
    [
        sh:path :moduleDescription ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Module must have a description" ;
    ] .

:LegacySupportShape a sh:NodeShape ;
    sh:targetClass :LegacySupport ;
    sh:property [
        sh:path :hasLegacyMapping ;
        sh:class owl:Thing ;
        sh:minCount 1 ;
        sh:message "Legacy support must have at least one mapping" ;
    ] .

# Model Conformance Rules
:ModelConformance rdf:type owl:Class ;
    rdfs:label "Model Conformance" ;
    rdfs:comment "Rules for ensuring model consistency and integration" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:hasConformanceCheck rdf:type owl:ObjectProperty ;
    rdfs:label "Has Conformance Check" ;
    rdfs:comment "Links a model to its conformance validation rules" ;
    rdfs:domain owl:Ontology ;
    rdfs:range :ModelConformance ;
    owl:versionInfo "1.0.0" .

:conformanceLevel rdf:type owl:DatatypeProperty ;
    rdfs:label "Conformance Level" ;
    rdfs:comment "Level of conformance required (STRICT, MODERATE, RELAXED)" ;
    rdfs:domain :ModelConformance ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

:requiresPrefixValidation rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Prefix Validation" ;
    rdfs:comment "Whether prefix validation is required" ;
    rdfs:domain :ModelConformance ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresNamespaceValidation rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Namespace Validation" ;
    rdfs:comment "Whether namespace validation is required" ;
    rdfs:domain :ModelConformance ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

# Integration Process Rules
:IntegrationProcess rdf:type owl:Class ;
    rdfs:label "Integration Process" ;
    rdfs:comment "Rules for model integration and version management" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:hasIntegrationStep rdf:type owl:ObjectProperty ;
    rdfs:label "Has Integration Step" ;
    rdfs:comment "Links to specific integration process steps" ;
    rdfs:domain :IntegrationProcess ;
    rdfs:range :IntegrationStep ;
    owl:versionInfo "1.0.0" .

:IntegrationStep rdf:type owl:Class ;
    rdfs:label "Integration Step" ;
    rdfs:comment "A step in the model integration process" ;
    owl:versionInfo "1.0.0" .

:stepOrder rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Order" ;
    rdfs:comment "Order of execution for integration steps" ;
    rdfs:domain :IntegrationStep ;
    rdfs:range xsd:integer ;
    owl:versionInfo "1.0.0" .

:stepDescription rdf:type owl:DatatypeProperty ;
    rdfs:label "Step Description" ;
    rdfs:comment "Description of the integration step" ;
    rdfs:domain :IntegrationStep ;
    rdfs:range xsd:string ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Model Conformance
:ModelConformanceShape a sh:NodeShape ;
    sh:targetClass :ModelConformance ;
    sh:property [
        sh:path :conformanceLevel ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("STRICT" "MODERATE" "RELAXED") ;
        sh:message "Conformance level must be STRICT, MODERATE, or RELAXED" ;
    ] ,
    [
        sh:path :requiresPrefixValidation ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether prefix validation is required" ;
    ] ,
    [
        sh:path :requiresNamespaceValidation ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether namespace validation is required" ;
    ] .

# SHACL Shapes for Integration Process
:IntegrationProcessShape a sh:NodeShape ;
    sh:targetClass :IntegrationProcess ;
    sh:property [
        sh:path :hasIntegrationStep ;
        sh:class :IntegrationStep ;
        sh:minCount 1 ;
        sh:message "Integration process must have at least one step" ;
    ] .

:IntegrationStepShape a sh:NodeShape ;
    sh:targetClass :IntegrationStep ;
    sh:property [
        sh:path :stepOrder ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 1 ;
        sh:message "Step must have a positive integer order" ;
    ] ,
    [
        sh:path :stepDescription ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Step must have a description" ;
    ] .

# Example Integration Process
:standardIntegrationProcess rdf:type owl:NamedIndividual, :IntegrationProcess ;
    rdfs:label "Standard Integration Process" ;
    rdfs:comment "Standard process for model integration" ;
    :hasIntegrationStep :prefixValidationStep ;
    :hasIntegrationStep :namespaceValidationStep ;
    :hasIntegrationStep :modelConformanceStep ;
    :hasIntegrationStep :versionAlignmentStep .

:prefixValidationStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Prefix Validation" ;
    rdfs:comment "Validate prefix usage against prefix management rules" ;
    :stepOrder 1 ;
    :stepDescription "Check prefix format, uniqueness, and URI patterns" .

:namespaceValidationStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Namespace Validation" ;
    rdfs:comment "Validate namespace usage and relationships" ;
    :stepOrder 2 ;
    :stepDescription "Verify namespace consistency and imports" .

:modelConformanceStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Model Conformance" ;
    rdfs:comment "Check model against conformance rules" ;
    :stepOrder 3 ;
    :stepDescription "Validate model structure and relationships" .

:versionAlignmentStep rdf:type owl:NamedIndividual, :IntegrationStep ;
    rdfs:label "Version Alignment" ;
    rdfs:comment "Ensure version compatibility" ;
    :stepOrder 4 ;
    :stepDescription "Check version numbers and dependencies" .

# Example Conformance Rules
:strictConformance rdf:type owl:NamedIndividual, :ModelConformance ;
    rdfs:label "Strict Conformance" ;
    rdfs:comment "Strict conformance rules for model validation" ;
    :conformanceLevel "STRICT" ;
    :requiresPrefixValidation true ;
    :requiresNamespaceValidation true .

# Test Protocol Definition
:TestProtocol rdf:type owl:Class ;
    rdfs:label "Test Protocol" ;
    rdfs:comment "Formal definition of testing requirements and procedures" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:RequirementTestingDirective rdf:type owl:Class ;
    rdfs:label "Requirement Testing Directive" ;
    rdfs:comment "Directive specifying requirements testing coverage and validation" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:TestPhase rdf:type owl:Class ;
    rdfs:label "Test Phase" ;
    rdfs:comment "A phase in the testing protocol" ;
    owl:versionInfo "1.0.0" .

:TestCoverage rdf:type owl:Class ;
    rdfs:label "Test Coverage" ;
    rdfs:comment "Specification of required test coverage" ;
    owl:versionInfo "1.0.0" .

# Test Protocol Properties
:hasTestPhase rdf:type owl:ObjectProperty ;
    rdfs:label "Has Test Phase" ;
    rdfs:comment "Links test protocol to its phases" ;
    rdfs:domain :TestProtocol ;
    rdfs:range :TestPhase .

:hasTestCoverage rdf:type owl:ObjectProperty ;
    rdfs:label "Has Test Coverage" ;
    rdfs:comment "Links test protocol to coverage requirements" ;
    rdfs:domain :TestProtocol ;
    rdfs:range :TestCoverage .

:phaseOrder rdf:type owl:DatatypeProperty ;
    rdfs:label "Phase Order" ;
    rdfs:comment "Order of execution for test phases" ;
    rdfs:domain :TestPhase ;
    rdfs:range xsd:integer .

:coverageThreshold rdf:type owl:DatatypeProperty ;
    rdfs:label "Coverage Threshold" ;
    rdfs:comment "Required percentage of coverage" ;
    rdfs:domain :TestCoverage ;
    rdfs:range xsd:decimal .

:requirementTestingLevel rdf:type owl:DatatypeProperty ;
    rdfs:label "Requirement Testing Level" ;
    rdfs:comment "Required level of testing for requirements (FULL, PARTIAL)" ;
    rdfs:domain :RequirementTestingDirective ;
    rdfs:range xsd:string .

# Test Protocol Instance
:ontologyFrameworkTestProtocol rdf:type :TestProtocol ;
    rdfs:label "Ontology Framework Test Protocol" ;
    rdfs:comment "Standard test protocol for ontology framework components" ;
    :hasTestPhase :modelValidationPhase, :requirementValidationPhase, :integrationTestPhase ;
    :hasTestCoverage :standardCoverage .

:modelValidationPhase rdf:type :TestPhase ;
    rdfs:label "Model Validation Phase" ;
    rdfs:comment "Validate ontology model structure and constraints" ;
    :phaseOrder 1 ;
    validation:hasTestCase validation:ModelStructureTest .

:requirementValidationPhase rdf:type :TestPhase ;
    rdfs:label "Requirement Validation Phase" ;
    rdfs:comment "Validate requirements and their test coverage" ;
    :phaseOrder 2 ;
    validation:hasTestCase validation:RequirementCoverageTest .

:integrationTestPhase rdf:type :TestPhase ;
    rdfs:label "Integration Test Phase" ;
    rdfs:comment "Test integration between components" ;
    :phaseOrder 3 ;
    validation:hasTestCase validation:ComponentIntegrationTest .

:standardCoverage rdf:type :TestCoverage ;
    rdfs:label "Standard Coverage" ;
    rdfs:comment "Standard coverage requirements for ontology framework" ;
    :coverageThreshold "0.95"^^xsd:decimal .

# Requirement Testing Directive Instance
:comprehensiveTestingDirective rdf:type :RequirementTestingDirective ;
    rdfs:label "Comprehensive Testing Directive" ;
    rdfs:comment "Directive requiring comprehensive testing of all requirements" ;
    :requirementTestingLevel "FULL" ;
    validation:hasTestCase validation:RequirementComplianceTest .

# SHACL Shapes for Test Protocol
:TestProtocolShape a sh:NodeShape ;
    sh:targetClass :TestProtocol ;
    sh:property [
        sh:path :hasTestPhase ;
        sh:class :TestPhase ;
        sh:minCount 1 ;
        sh:message "Test protocol must have at least one phase"
    ] ,
    [
        sh:path :hasTestCoverage ;
        sh:class :TestCoverage ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Test protocol must specify coverage requirements"
    ] .

:TestPhaseShape a sh:NodeShape ;
    sh:targetClass :TestPhase ;
    sh:property [
        sh:path :phaseOrder ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 1 ;
        sh:message "Test phase must have a valid order"
    ] ,
    [
        sh:path validation:hasTestCase ;
        sh:class validation:TestCase ;
        sh:minCount 1 ;
        sh:message "Test phase must have at least one test case"
    ] .

:TestCoverageShape a sh:NodeShape ;
    sh:targetClass :TestCoverage ;
    sh:property [
        sh:path :coverageThreshold ;
        sh:datatype xsd:decimal ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 0 ;
        sh:maxInclusive 1 ;
        sh:message "Coverage threshold must be between 0 and 1"
    ] .

:RequirementTestingDirectiveShape a sh:NodeShape ;
    sh:targetClass :RequirementTestingDirective ;
    sh:property [
        sh:path :requirementTestingLevel ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("FULL" "PARTIAL") ;
        sh:message "Testing level must be either FULL or PARTIAL"
    ] .

# Additional Model Requirements
:ModelRequirements rdf:type owl:Class ;
    rdfs:label "Model Requirements" ;
    rdfs:comment "Additional requirements for model management" ;
    owl:versionInfo "1.0.0" ;
    rdfs:isDefinedBy :GuidanceOntology .

:requiresVersionTracking rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Version Tracking" ;
    rdfs:comment "Whether version tracking is required for models" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresDependencyManagement rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Dependency Management" ;
    rdfs:comment "Whether dependency management is required" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresValidationPipeline rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Validation Pipeline" ;
    rdfs:comment "Whether a validation pipeline is required" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

:requiresDocumentation rdf:type owl:DatatypeProperty ;
    rdfs:label "Requires Documentation" ;
    rdfs:comment "Whether documentation is required" ;
    rdfs:domain :ModelRequirements ;
    rdfs:range xsd:boolean ;
    owl:versionInfo "1.0.0" .

# SHACL Shapes for Model Requirements
:ModelRequirementsShape a sh:NodeShape ;
    sh:targetClass :ModelRequirements ;
    sh:property [
        sh:path :requiresVersionTracking ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether version tracking is required" ;
    ] ,
    [
        sh:path :requiresDependencyManagement ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether dependency management is required" ;
    ] ,
    [
        sh:path :requiresValidationPipeline ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether validation pipeline is required" ;
    ] ,
    [
        sh:path :requiresDocumentation ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must specify whether documentation is required" ;
    ] .
