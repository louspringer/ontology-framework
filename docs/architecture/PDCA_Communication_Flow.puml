@startuml PDCA Communication Flow

participant "Client" as client
participant "MCPValidator" as mcp
participant "PlanPhase" as plan
participant "DoPhase" as do
participant "CheckPhase" as check
participant "AdjustPhase" as adjust
participant "ValidationHandler" as handler

client -> mcp: validate_bfg9k(context)
activate mcp

mcp -> plan: execute(context)
activate plan
plan --> mcp: plan_results
deactivate plan

mcp -> do: execute(context)
activate do
do --> mcp: do_results
deactivate do

mcp -> check: execute(context)
activate check
check --> mcp: check_results
deactivate check

mcp -> adjust: execute(context)
activate adjust
adjust --> mcp: adjust_results
deactivate adjust

mcp -> handler: validate(ValidationRule.SPORE, data)
activate handler
handler --> mcp: validation_result
deactivate handler

mcp --> client: final_result
deactivate mcp

@enduml
```

### Communication Flow Explanation

The communication diagram illustrates the flow of the PDCA cycle through the system. The process follows these steps:

1. **Client Request**:
   - A client initiates validation by calling the MCPValidator's `validate_bfg9k` method

2. **Plan Phase**:
   - Define objectives and processes
   - Establish validation rules and requirements
   - Create implementation plan

3. **Do Phase**:
   - Execute planned changes
   - Generate and modify files as needed
   - Apply validation rules

4. **Check Phase**:
   - Measure results against objectives
   - Validate implementation
   - Identify issues and deviations

5. **Adjust Phase**:
   - Analyze check results
   - Generate necessary adjustments
   - Provide recommendations for improvement

6. **Validation**:
   - Final validation of all changes
   - Ensure compliance with requirements
   - Return final results to client

## Integration Points

### Configuration Management
- The system uses a unified configuration structure in `mcp.json`:
  ```json
  {
    "core": {
      "validation": {
        "enabled": true,
        "requirePhaseOrder": true,
        "requireContext": true,
        "requireServerConfig": true,
        "dryRun": false,
        "backupEnabled": true,
        "rules": {
          "phaseOrder": [
            "plan",
            "do",
            "check",
            "adjust"
          ],
          "requiredPhases": [
            "plan",
            "do",
            "check",
            "adjust"
          ]
        }
      },
      "validationRules": { ... }
    },
    "adapters": { ... },
    "metadata": { ... },
    "logging": { ... }
  }
  ```

### PDCA Cycle Implementation
- Each phase has specific responsibilities:
  - **Plan**: Define objectives and processes
  - **Do**: Implement planned changes
  - **Check**: Measure and validate results
  - **Adjust**: Improve based on findings
- Phases are coordinated through the MCPValidator
- Results from each phase contribute to the final outcome

## Conclusion

This architecture ensures a robust, flexible validation system where the PDCA cycle serves as the core process improvement methodology within the broader MCP framework. The system provides continuous improvement capabilities while maintaining integration with validation and security requirements. 